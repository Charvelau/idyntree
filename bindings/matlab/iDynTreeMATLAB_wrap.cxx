/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMATLAB
#define SWIG_name_d      "iDynTree"
#define SWIG_name        iDynTree

#define SWIG_op_prefix        "op_"
#define SWIG_pkg_name        "iDynTree"


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <mex.h>
#include <math.h> /* need this for floor() */

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



SWIGRUNTIME bool SWIG_check_num_args(const char *func_name, int num_args, int max_args, int min_args, int varargs) {
  if (num_args > max_args && !varargs)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s takes at most %i arguments", func_name, max_args);
  else if (num_args < min_args)
    mexWarnMsgIdAndTxt("SWIG:RuntimeError","function %s requires at least %i arguments", func_name, min_args);
  else
    return true;
  return false;
}

SWIGRUNTIME const char* SWIG_ErrorType(int code) {
  switch (code) {
  case SWIG_MemoryError:
    return "SWIG:MemoryError";
  case SWIG_IOError:
    return "SWIG:IOError";
  case SWIG_RuntimeError:
    return "SWIG:RuntimeError";
  case SWIG_IndexError:
    return "SWIG:IndexError";
  case SWIG_TypeError:
    return "SWIG:TypeError";
  case SWIG_DivisionByZero:
    return "SWIG:DivisionByZero";
  case SWIG_OverflowError:
    return "SWIG:OverflowError";
  case SWIG_SyntaxError:
    return "SWIG:SyntaxError";
  case SWIG_ValueError:
    return "SWIG:ValueError";
  case SWIG_SystemError:
    return "SWIG:SystemError";
  case SWIG_AttributeError:
    return "SWIG:AttributeError";
  }
  return "SWIG:UnknownError";
}

SWIGRUNTIME void SWIG_Error(int code, const char *msg) {
  mexWarnMsgIdAndTxt(SWIG_ErrorType(code),msg);
}

#define SWIG_fail                                       goto fail

#define SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Matlab_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Matlab_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Matlab_NewPointerObj(ptr, type, flags)
#define swig_owntype                                    int

#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Matlab_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Matlab_NewPackedObj(ptr, sz, type)

#define SWIG_GetModule(clientdata) SWIG_Matlab_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Matlab_SetModule(clientdata,pointer);
#define SWIG_MODULE_CLIENTDATA_TYPE void*

#define Matlab_Error_Occurred() 0
#define SWIG_Matlab_AddErrorMsg(msg) {;}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata);
SWIGRUNTIME void SWIG_Matlab_SetModule(void *clientdata, swig_module_info *pointer);

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      0

/* Runtime API implementation */

SWIGRUNTIME mxArray* SWIG_Matlab_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  mxArray* pm_command = mxCreateString("_swigCreate");
  mxArray* pm;
#if 0
  const char* classname = type->name+3;   /* FIXME: Hack to dereferece pointer */
  char matlab_classname[1024];
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
  _snprintf(matlab_classname,sizeof(matlab_classname)-1,"%s.%s",SWIG_pkg_name,classname);
#else
  snprintf(matlab_classname,sizeof(matlab_classname),"%s.%s",SWIG_pkg_name,classname);
#endif

#else
  const char * matlab_classname;
  if (type->clientdata)
        matlab_classname = (const char *)type->clientdata;
  else {
       /* TODO do we really want this? it's a fall-back for non-package types (e.g pointer-to-float)
          However, it will fail anyway because the mexCallMATLABWithTrap call will fail 
          (as there'd be no package.float matlab-type)
       */
       matlab_classname = type->name+3;    /* FIXME: Hack to dereference pointer */
       mexWarnMsgIdAndTxt("SWIG:NewPointerObj","NewPointerObj problem. clientdata NULL. guessed %s", matlab_classname);
  }       
#endif

  mxArray* ex = mexCallMATLABWithTrap(1,&pm,1,&pm_command,matlab_classname);

  /* Hack hack */
  if(ex){
    /* the above failed, so let's just create a SwigRef */
    mxDestroyArray(ex);
    mexWarnMsgIdAndTxt("SWIG:NewPointerObj","NewPointerObj problem. creating SwigRef as opposed to %s", matlab_classname);
    ex = mexCallMATLABWithTrap(1,&pm,0,0,"SwigRef");
  }

  if(ex) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mexCallMATLABWithTrap failed for %s",type->name);
  mxDestroyArray(pm_command);

  mxArray* pm_type = mxCreateString(type->name);
  mxSetProperty(pm,0,"swigType",pm_type);
  mxDestroyArray(pm_type);

  mxArray *pm_ptr = mxCreateNumericMatrix(1,1,mxUINT64_CLASS, mxREAL);
  *(uint64_T *)mxGetData(pm_ptr) = (uint64_T)ptr;
  if(!pm_ptr) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mxCreateNumericMatrix failed");
  mxSetProperty(pm,0,"swigCPtr",pm_ptr);
  mxDestroyArray(pm_ptr);

  bool own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  mxArray* pm_own = mxCreateLogicalScalar(own);  
  if(!pm_own) mexErrMsgIdAndTxt("SWIG:NewPointerObj","mxCreateLogicalScalar failed");
  mxSetProperty(pm,0,"swigOwn",pm_own);
  mxDestroyArray(pm_own);

  return pm;
}

SWIGRUNTIME int SWIG_Matlab_ConvertPtrAndOwn(mxArray* pm, void **ptr, swig_type_info *type, int flags, int *own) {
  /* Return value */
  int ret = SWIG_OK;

  /* Get pointer, represented as a uint64_T scalar */
  mxArray *pm_ptr = mxGetProperty(pm,0,"swigCPtr");
  if(!pm_ptr || mxGetNumberOfElements(pm_ptr) != 1 || mxGetClassID(pm_ptr) != mxUINT64_CLASS || mxIsComplex(pm_ptr)){
    ret = SWIG_ERROR;
  } else {
    if(ptr) *ptr = (void*)(*(uint64_T*)mxGetData(pm_ptr));
  }
  if(pm_ptr) mxDestroyArray(pm_ptr);
  if (ret == SWIG_ERROR)
    return ret;

  /* Get ownership marker */
  mxArray *pm_own = mxGetProperty(pm,0,"swigOwn");
  if(!pm_own || !mxIsLogicalScalar(pm_own)){
    ret = SWIG_ERROR;
  } else {
    if(own) *own = mxIsLogicalScalarTrue(pm_own);
  }
  if(pm_own) mxDestroyArray(pm_own);
  if (ret == SWIG_ERROR)
    return ret;

  /* Set ownership marker to false? */
  if(flags & SWIG_POINTER_DISOWN){
    mxArray* pm_own = mxCreateLogicalScalar(false);
    mxSetProperty(pm,0,"swigOwn",pm_own);
    mxDestroyArray(pm_own);
  }

  /* Get type */
  mxArray *pm_type = mxGetProperty(pm,0,"swigType");
  char type_str[1024];
  if(!pm_type || !mxIsChar(pm_type)){
    ret = SWIG_ERROR;
  } else if (mxGetString(pm_type, type_str, 1024)) {
      ret = SWIG_ERROR;
  }
  if(pm_type) mxDestroyArray(pm_type);
  if (ret == SWIG_ERROR)
    return ret;

  if (strcmp(type_str, type->name)==0) {
      /* no type cast needed */
      return SWIG_OK;
  }
  swig_cast_info *tc = SWIG_TypeCheck(type_str,type);
  if (!tc) {
    /* type doesn't match */
    return SWIG_ERROR;
  }
  /* do type-cast (but only if non-zero ptr, otherwise it's trivial) */
  if (ptr) {
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc,*ptr,&newmemory);
    if (newmemory == SWIG_CAST_NEW_MEMORY) {
       if (own)
         *own = *own | SWIG_CAST_NEW_MEMORY;
        else {
         /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
         mexErrMsgIdAndTxt("SWIG:ConvertPointerObj","SWIG error in converting pointer for type %s. Bad typemap?",type->name);
         ret=SWIG_ERROR;
        }
    } 
  }

  return ret;
}

SWIGRUNTIME swig_module_info *SWIG_Matlab_GetModule(void *clientdata) {
  swig_module_info *pointer = 0;
  return pointer;
}

SWIGRUNTIME void SWIG_Matlab_SetModule(void *clientdata, swig_module_info *pointer) {
}

/* HACK HACK */
#define SWIG_Matlab_SetConstant(dummy1,dummy2,pm) (pm)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_iDynTree__IMatrix swig_types[2]
#define SWIGTYPE_p_iDynTree__IVector swig_types[3]
#define SWIGTYPE_p_iDynTree__MatrixDynSize swig_types[4]
#define SWIGTYPE_p_iDynTree__Position swig_types[5]
#define SWIGTYPE_p_iDynTree__PositionRaw swig_types[6]
#define SWIGTYPE_p_iDynTree__PositionSemantics swig_types[7]
#define SWIGTYPE_p_iDynTree__Rotation swig_types[8]
#define SWIGTYPE_p_iDynTree__RotationRaw swig_types[9]
#define SWIGTYPE_p_iDynTree__RotationSemantics swig_types[10]
#define SWIGTYPE_p_iDynTree__SpatialForceVectorRaw swig_types[11]
#define SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw swig_types[12]
#define SWIGTYPE_p_iDynTree__Transform swig_types[13]
#define SWIGTYPE_p_iDynTree__TransformRaw swig_types[14]
#define SWIGTYPE_p_iDynTree__TransformSemantics swig_types[15]
#define SWIGTYPE_p_iDynTree__Twist swig_types[16]
#define SWIGTYPE_p_iDynTree__Vector6 swig_types[17]
#define SWIGTYPE_p_iDynTree__VectorDynSize swig_types[18]
#define SWIGTYPE_p_iDynTree__Wrench swig_types[19]
static swig_type_info *swig_types[21];
static swig_module_info swig_module = {swig_types, 20, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#define SWIGVERSION 0x030005 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>


/* Note : always include headers following the inheritance order */

// Basic math classes
#include "iDynTree/Core/IMatrix.h"
#include "iDynTree/Core/IVector.h"
#include "iDynTree/Core/MatrixDynSize.h"
#include "iDynTree/Core/Vector6.h"
#include "iDynTree/Core/VectorDynSize.h"

// Basic Vectors: Point Vectors and Spatial Vectors
#include "iDynTree/Core/PositionRaw.h"
#include "iDynTree/Core/PositionSemantics.h"
#include "iDynTree/Core/Position.h"
#include "iDynTree/Core/SpatialForceVectorRaw.h"
#include "iDynTree/Core/SpatialMotionVectorRaw.h"
#include "iDynTree/Core/Twist.h"
#include "iDynTree/Core/Wrench.h"

// Transformations: Rotation and Transform
#include "iDynTree/Core/RotationRaw.h"
#include "iDynTree/Core/RotationSemantics.h"
#include "iDynTree/Core/Rotation.h"
#include "iDynTree/Core/TransformRaw.h"
#include "iDynTree/Core/TransformSemantics.h"
#include "iDynTree/Core/Transform.h"



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


  SWIGINTERN int SWIG_AsVal_unsigned_SS_long (mxArray* pm, unsigned long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (unsigned long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (unsigned long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (unsigned long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (unsigned long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (unsigned long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (unsigned long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (unsigned long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (unsigned long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (unsigned long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (mxArray* obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_double    (double value)
    {    
      return mxCreateDoubleScalar(value);
    }


  SWIGINTERN int SWIG_AsVal_double (mxArray* pm, double* val)
    {
      if(!mxIsDouble(pm) || mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      if (val) *val = mxGetScalar(pm);
      return SWIG_OK;
    }


SWIGINTERNINLINE mxArray*
  SWIG_From_bool  (bool value)
{
  return mxCreateLogicalScalar(value);
}


  SWIGINTERNINLINE mxArray* SWIG_From_unsigned_SS_long    (unsigned long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxUINT64_CLASS,mxREAL);
      *((uint64_T*)mxGetData(out)) = (uint64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE mxArray*
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
   mwSize dims[2] = {1,(mwSize)size};
   mxArray* ret = mxCreateCharArray((mwSize)2,dims);
   if(!ret) mexErrMsgIdAndTxt("SWIG:FromCharPtrAndSize","mxCreateCharArray failed");
   mxChar *ret_data = (mxChar *)mxGetData(ret);
   int i;
   for(i=0; i<size; ++i) ret_data[i] = carray[i];
   return ret;  
}


SWIGINTERNINLINE mxArray*
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


  SWIGINTERN int SWIG_AsVal_long (mxArray* pm, long* val)
    {
      if(mxGetNumberOfElements(pm)!=1) return SWIG_TypeError;
      switch(mxGetClassID(pm)){
      case mxINT8_CLASS:
        if(val) *val = (long)(*(int8_T*)mxGetData(pm)); break;
      case mxUINT8_CLASS:
        if(val) *val = (long)(*(uint8_T*)mxGetData(pm)); break;
      case mxINT16_CLASS:
        if(val) *val = (long)(*(int16_T*)mxGetData(pm)); break;
      case mxUINT16_CLASS:
        if(val) *val = (long)(*(uint16_T*)mxGetData(pm)); break;
      case mxINT32_CLASS:
        if(val) *val = (long)(*(int32_T*)mxGetData(pm)); break;
      case mxUINT32_CLASS:
        if(val) *val = (long)(*(uint32_T*)mxGetData(pm)); break;
      case mxINT64_CLASS:
        if(val) *val = (long)(*(int64_T*)mxGetData(pm)); break;
      case mxUINT64_CLASS: 
        if(val) *val = (long)(*(uint64_T*)mxGetData(pm)); break;
      case mxDOUBLE_CLASS:
      {
	double v=mxGetScalar(pm);
	if(v!=floor(v)) return SWIG_TypeError;
        if(val) *val = (long)v;
        break;
      }
      default: return SWIG_TypeError;
      }
      return SWIG_OK;
    }


SWIGINTERN int
SWIG_AsVal_int (mxArray* obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  SWIGINTERNINLINE mxArray* SWIG_From_long    (long value)
    {    
      mxArray* out = mxCreateNumericMatrix(1,1,mxINT64_CLASS,mxREAL);
      *((int64_T*)mxGetData(out)) = (int64_T)value;
      return out;
    }


SWIGINTERNINLINE mxArray*
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}

void _wrap_delete_IMatrix (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_IMatrix",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IMatrix" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_IMatrix.");
}


void _wrap_IMatrix_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IMatrix_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_TODOparen" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::IMatrix const *)arg1)->operator ()(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_TODOparen.");
}


void _wrap_IMatrix_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IMatrix_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_TODOparen" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_TODOparen.");
}


void _wrap_IMatrix_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__IMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IMatrix_TODOparen__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__IMatrix, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IMatrix_TODOparen__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_IMatrix_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IMatrix_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_getVal" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::IMatrix const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_getVal.");
}


void _wrap_IMatrix_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IMatrix_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_setVal" "', argument " "1"" of type '" "iDynTree::IMatrix *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IMatrix_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IMatrix_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IMatrix_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_setVal.");
}


void _wrap_IMatrix_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IMatrix_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_rows" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  result = (unsigned int)((iDynTree::IMatrix const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_rows.");
}


void _wrap_IMatrix_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IMatrix *arg1 = (iDynTree::IMatrix *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IMatrix_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IMatrix, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IMatrix_cols" "', argument " "1"" of type '" "iDynTree::IMatrix const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IMatrix * >(argp1);
  result = (unsigned int)((iDynTree::IMatrix const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IMatrix_cols.");
}


void _wrap_delete_IVector (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_IVector",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IVector" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_IVector.");
}


void _wrap_IVector_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IVector_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_TODOparen" "', argument " "1"" of type '" "iDynTree::IVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::IVector const *)arg1)->operator ()(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IVector_TODOparen.");
}


void _wrap_IVector_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("IVector_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_TODOparen" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IVector_TODOparen.");
}


void _wrap_IVector_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__IVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IVector_TODOparen__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__IVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IVector_TODOparen__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_IVector_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("IVector_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_getVal" "', argument " "1"" of type '" "iDynTree::IVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::IVector const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IVector_getVal.");
}


void _wrap_IVector_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("IVector_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_setVal" "', argument " "1"" of type '" "iDynTree::IVector *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IVector_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IVector_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IVector_setVal.");
}


void _wrap_IVector_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::IVector *arg1 = (iDynTree::IVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("IVector_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__IVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IVector_size" "', argument " "1"" of type '" "iDynTree::IVector const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::IVector * >(argp1);
  result = (unsigned int)((iDynTree::IVector const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function IVector_size.");
}


void _wrap_new_MatrixDynSize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_MatrixDynSize.");
}


void _wrap_new_MatrixDynSize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_MatrixDynSize.");
}


void _wrap_new_MatrixDynSize__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::MatrixDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_MatrixDynSize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MatrixDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MatrixDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MatrixDynSize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (iDynTree::MatrixDynSize *)new iDynTree::MatrixDynSize((double const *)arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__MatrixDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_MatrixDynSize.");
}


void _wrap_new_MatrixDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_MatrixDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_MatrixDynSize__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MatrixDynSize__SWIG_2(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_MatrixDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_MatrixDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MatrixDynSize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_MatrixDynSize.");
}


void _wrap_MatrixDynSize_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("MatrixDynSize_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_TODOparen" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixDynSize const *)arg1)->operator ()(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_TODOparen.");
}


void _wrap_MatrixDynSize_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_TODOparen" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_TODOparen.");
}


void _wrap_MatrixDynSize_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDynSize_TODOparen__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MatrixDynSize_TODOparen__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_MatrixDynSize_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("MatrixDynSize_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_getVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::MatrixDynSize const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_getVal.");
}


void _wrap_MatrixDynSize_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("MatrixDynSize_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_setVal" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MatrixDynSize_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_setVal.");
}


void _wrap_MatrixDynSize_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_rows" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_rows.");
}


void _wrap_MatrixDynSize_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("MatrixDynSize_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_cols" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (unsigned int)((iDynTree::MatrixDynSize const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_cols.");
}


void _wrap_MatrixDynSize_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_data" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (double *)((iDynTree::MatrixDynSize const *)arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_data.");
}


void _wrap_MatrixDynSize_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("MatrixDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_data" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_data.");
}


void _wrap_MatrixDynSize_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDynSize_data__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__MatrixDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MatrixDynSize_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_MatrixDynSize_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_zero" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_zero.");
}


void _wrap_MatrixDynSize_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("MatrixDynSize_resize",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_resize" "', argument " "1"" of type '" "iDynTree::MatrixDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MatrixDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MatrixDynSize_resize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  (arg1)->resize(arg2,arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_resize.");
}


void _wrap_MatrixDynSize_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_toString" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_toString.");
}


void _wrap_MatrixDynSize_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::MatrixDynSize *arg1 = (iDynTree::MatrixDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("MatrixDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__MatrixDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MatrixDynSize_display" "', argument " "1"" of type '" "iDynTree::MatrixDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::MatrixDynSize * >(argp1);
  result = ((iDynTree::MatrixDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function MatrixDynSize_display.");
}


void _wrap_new_VectorDynSize__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_VectorDynSize.");
}


void _wrap_new_VectorDynSize__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_unsigned_SS_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize(arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_VectorDynSize.");
}


void _wrap_new_VectorDynSize__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::VectorDynSize *result = 0 ;
  
  if (!SWIG_check_num_args("new_VectorDynSize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_VectorDynSize" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VectorDynSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::VectorDynSize *)new iDynTree::VectorDynSize((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__VectorDynSize, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_VectorDynSize.");
}


void _wrap_new_VectorDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_VectorDynSize__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_VectorDynSize__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VectorDynSize__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_VectorDynSize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_VectorDynSize",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VectorDynSize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_VectorDynSize.");
}


void _wrap_VectorDynSize_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("VectorDynSize_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_TODOparen" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorDynSize const *)arg1)->operator ()(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_TODOparen.");
}


void _wrap_VectorDynSize_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_TODOparen" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_TODOparen.");
}


void _wrap_VectorDynSize_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDynSize_TODOparen__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VectorDynSize_TODOparen__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_VectorDynSize_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("VectorDynSize_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_getVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::VectorDynSize const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_getVal.");
}


void _wrap_VectorDynSize_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("VectorDynSize_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_setVal" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VectorDynSize_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_setVal.");
}


void _wrap_VectorDynSize_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("VectorDynSize_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_size" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (unsigned int)((iDynTree::VectorDynSize const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_size.");
}


void _wrap_VectorDynSize_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_data" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (double *)((iDynTree::VectorDynSize const *)arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_data.");
}


void _wrap_VectorDynSize_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("VectorDynSize_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_data" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_data.");
}


void _wrap_VectorDynSize_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDynSize_data__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__VectorDynSize, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VectorDynSize_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_VectorDynSize_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_zero" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_zero.");
}


void _wrap_VectorDynSize_resize (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("VectorDynSize_resize",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_resize" "', argument " "1"" of type '" "iDynTree::VectorDynSize *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VectorDynSize_resize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->resize(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_resize.");
}


void _wrap_VectorDynSize_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_toString" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_toString.");
}


void _wrap_VectorDynSize_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::VectorDynSize *arg1 = (iDynTree::VectorDynSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("VectorDynSize_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__VectorDynSize, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VectorDynSize_display" "', argument " "1"" of type '" "iDynTree::VectorDynSize const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::VectorDynSize * >(argp1);
  result = ((iDynTree::VectorDynSize const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function VectorDynSize_display.");
}


void _wrap_new_Vector6__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Vector6 *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Vector6 *)new iDynTree::Vector6();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Vector6, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Vector6.");
}


void _wrap_new_Vector6__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Vector6 *result = 0 ;
  
  if (!SWIG_check_num_args("new_Vector6",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Vector6" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vector6" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Vector6 *)new iDynTree::Vector6((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Vector6, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Vector6.");
}


void _wrap_new_Vector6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Vector6__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vector6__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Vector6 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Vector6",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vector6" "', argument " "1"" of type '" "iDynTree::Vector6 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Vector6.");
}


void _wrap_Vector6_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector6_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_TODOparen" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::Vector6 const *)arg1)->operator ()(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_TODOparen.");
}


void _wrap_Vector6_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_TODOparen" "', argument " "1"" of type '" "iDynTree::Vector6 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_TODOparen.");
}


void _wrap_Vector6_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Vector6, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector6_TODOparen__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Vector6, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Vector6_TODOparen__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Vector6_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("Vector6_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_getVal" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::Vector6 const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_getVal.");
}


void _wrap_Vector6_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Vector6_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_setVal" "', argument " "1"" of type '" "iDynTree::Vector6 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vector6_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Vector6_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_setVal.");
}


void _wrap_Vector6_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("Vector6_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_size" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  result = (unsigned int)((iDynTree::Vector6 const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_size.");
}


void _wrap_Vector6_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_data" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  result = (double *)((iDynTree::Vector6 const *)arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_data.");
}


void _wrap_Vector6_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("Vector6_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_data" "', argument " "1"" of type '" "iDynTree::Vector6 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_data.");
}


void _wrap_Vector6_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Vector6, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector6_data__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Vector6, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Vector6_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Vector6_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("Vector6_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_zero" "', argument " "1"" of type '" "iDynTree::Vector6 *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_zero.");
}


void _wrap_Vector6_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_toString" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  result = ((iDynTree::Vector6 const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_toString.");
}


void _wrap_Vector6_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Vector6 *arg1 = (iDynTree::Vector6 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Vector6_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Vector6, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vector6_display" "', argument " "1"" of type '" "iDynTree::Vector6 const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Vector6 * >(argp1);
  result = ((iDynTree::Vector6 const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Vector6_display.");
}


void _wrap_new_PositionRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionRaw.");
}


void _wrap_new_PositionRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionRaw.");
}


void _wrap_new_PositionRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::PositionRaw *)new iDynTree::PositionRaw((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionRaw.");
}


void _wrap_new_PositionRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PositionRaw__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_PositionRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_PositionRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionRaw" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_PositionRaw.");
}


void _wrap_PositionRaw_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("PositionRaw_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_TODOparen" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionRaw_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::PositionRaw const *)arg1)->operator ()(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_TODOparen.");
}


void _wrap_PositionRaw_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_TODOparen",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_TODOparen" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionRaw_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double *) &(arg1)->operator ()(arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_TODOparen.");
}


void _wrap_PositionRaw_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionRaw_TODOparen__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PositionRaw_TODOparen__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_PositionRaw_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("PositionRaw_getVal",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_getVal" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionRaw_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (double)((iDynTree::PositionRaw const *)arg1)->getVal(arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_getVal.");
}


void _wrap_PositionRaw_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionRaw_setVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_setVal" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionRaw_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionRaw_setVal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->setVal(arg2,arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_setVal.");
}


void _wrap_PositionRaw_size (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("PositionRaw_size",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_size" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (unsigned int)((iDynTree::PositionRaw const *)arg1)->size();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_size.");
}


void _wrap_PositionRaw_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_data" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (double *)((iDynTree::PositionRaw const *)arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_data.");
}


void _wrap_PositionRaw_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_data" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_data.");
}


void _wrap_PositionRaw_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PositionRaw_data__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PositionRaw_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_PositionRaw_zero (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionRaw_zero",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_zero" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  (arg1)->zero();
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_zero.");
}


void _wrap_PositionRaw_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changePoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changePoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_changePoint.");
}


void _wrap_PositionRaw_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changeRefPoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_changeRefPoint.");
}


void _wrap_PositionRaw_changeCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw *result = 0 ;
  
  if (!SWIG_check_num_args("PositionRaw_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::PositionRaw *) &(arg1)->changeCoordinateFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_changeCoordinateFrame.");
}


void _wrap_PositionRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_compose" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = iDynTree::PositionRaw::compose((iDynTree::PositionRaw const &)*arg1,(iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_compose.");
}


void _wrap_PositionRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("PositionRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionRaw_inverse" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = iDynTree::PositionRaw::inverse((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_inverse.");
}


void _wrap_PositionRaw_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_toString" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_toString.");
}


void _wrap_PositionRaw_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = (iDynTree::PositionRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionRaw_display" "', argument " "1"" of type '" "iDynTree::PositionRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = ((iDynTree::PositionRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionRaw_display.");
}


void _wrap_new_PositionSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionSemantics.");
}


void _wrap_new_PositionSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PositionSemantics" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionSemantics.");
}


void _wrap_new_PositionSemantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (iDynTree::PositionSemantics *)new iDynTree::PositionSemantics((iDynTree::PositionSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_PositionSemantics.");
}


void _wrap_new_PositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_PositionSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PositionSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PositionSemantics__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_PositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_PositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionSemantics" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_PositionSemantics.");
}


void _wrap_PositionSemantics_getPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getPoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_getPoint.");
}


void _wrap_PositionSemantics_getReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getReferencePoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getReferencePoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_getReferencePoint.");
}


void _wrap_PositionSemantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("PositionSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = (int)((iDynTree::PositionSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_getCoordinateFrame.");
}


void _wrap_PositionSemantics_setPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setPoint(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_setPoint.");
}


void _wrap_PositionSemantics_setReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setReferencePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setReferencePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setReferencePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferencePoint(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_setReferencePoint.");
}


void _wrap_PositionSemantics_setCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("PositionSemantics_setCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionSemantics_setCoordinateFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setCoordinateFrame(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_setCoordinateFrame.");
}


void _wrap_PositionSemantics_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changePoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changePoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changePoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_changePoint.");
}


void _wrap_PositionSemantics_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changeRefPoint" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changeRefPoint" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->changeRefPoint((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_changeRefPoint.");
}


void _wrap_PositionSemantics_changeCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::PositionSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeCoordinateFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_changeCoordinateFrame.");
}


void _wrap_PositionSemantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_compose" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)iDynTree::PositionSemantics::compose((iDynTree::PositionSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_compose.");
}


void _wrap_PositionSemantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("PositionSemantics_inverse",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "1"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionSemantics_inverse" "', argument " "2"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)iDynTree::PositionSemantics::inverse((iDynTree::PositionSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_inverse.");
}


void _wrap_PositionSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_toString" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_toString.");
}


void _wrap_PositionSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionSemantics *arg1 = (iDynTree::PositionSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("PositionSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionSemantics_display" "', argument " "1"" of type '" "iDynTree::PositionSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionSemantics * >(argp1);
  result = ((iDynTree::PositionSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function PositionSemantics_display.");
}


void _wrap_new_Position__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Position *)new iDynTree::Position();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Position.");
}


void _wrap_new_Position__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Position" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (iDynTree::Position *)new iDynTree::Position(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Position.");
}


void _wrap_new_Position__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Position.");
}


void _wrap_new_Position__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::PositionRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("new_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position" "', argument " "1"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::PositionRaw * >(argp1);
  result = (iDynTree::Position *)new iDynTree::Position((iDynTree::PositionRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Position.");
}


void _wrap_new_Position (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Position__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Position__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Position__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Position (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Position",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Position.");
}


void _wrap_Position_getSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Position_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getSemantics" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::PositionSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_getSemantics.");
}


void _wrap_Position_getSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Position_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_getSemantics" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = (iDynTree::PositionSemantics *) &((iDynTree::Position const *)arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__PositionSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_getSemantics.");
}


void _wrap_Position_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Position_getSemantics__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Position_getSemantics__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Position_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changePoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changePoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changePoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_changePoint.");
}


void _wrap_Position_changeRefPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeRefPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeRefPoint" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeRefPoint" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeRefPoint((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_changeRefPoint.");
}


void _wrap_Position_changeCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position *result = 0 ;
  
  if (!SWIG_check_num_args("Position_changeCoordinateFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_changeCoordinateFrame" "', argument " "1"" of type '" "iDynTree::Position *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_changeCoordinateFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Position *) &(arg1)->changeCoordinateFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_changeCoordinateFrame.");
}


void _wrap_Position_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_compose" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = iDynTree::Position::compose((iDynTree::Position const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_compose.");
}


void _wrap_Position_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_inverse" "', argument " "1"" of type '" "iDynTree::Position const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = iDynTree::Position::inverse((iDynTree::Position const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_inverse.");
}


void _wrap_Position_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_plus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_plus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator +((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_plus.");
}


void _wrap_Position_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_minus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position_minus" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Position const *)arg1)->operator -((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_minus.");
}


void _wrap_Position_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Position_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_uminus" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_uminus.");
}


void _wrap_Position_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_toString" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_toString.");
}


void _wrap_Position_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Position *arg1 = (iDynTree::Position *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Position_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Position, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position_display" "', argument " "1"" of type '" "iDynTree::Position const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Position * >(argp1);
  result = ((iDynTree::Position const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Position_display.");
}


void _wrap_new_SpatialForceVectorRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialForceVectorRaw *)new iDynTree::SpatialForceVectorRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialForceVectorRaw.");
}


void _wrap_new_SpatialForceVectorRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorRaw",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpatialForceVectorRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::SpatialForceVectorRaw *)new iDynTree::SpatialForceVectorRaw((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialForceVectorRaw.");
}


void _wrap_new_SpatialForceVectorRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialForceVectorRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialForceVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialForceVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  result = (iDynTree::SpatialForceVectorRaw *)new iDynTree::SpatialForceVectorRaw((iDynTree::SpatialForceVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialForceVectorRaw.");
}


void _wrap_new_SpatialForceVectorRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialForceVectorRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialForceVectorRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SpatialForceVectorRaw__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_SpatialForceVectorRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_SpatialForceVectorRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialForceVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_SpatialForceVectorRaw.");
}


void _wrap_SpatialForceVectorRaw_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::SpatialForceVectorRaw *) &(arg1)->changePoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_changePoint.");
}


void _wrap_SpatialForceVectorRaw_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::SpatialForceVectorRaw *) &(arg1)->changeCoordFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_changeCoordFrame.");
}


void _wrap_SpatialForceVectorRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_compose" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_compose" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = iDynTree::SpatialForceVectorRaw::compose((iDynTree::SpatialForceVectorRaw const &)*arg1,(iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_compose.");
}


void _wrap_SpatialForceVectorRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_inverse" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  result = iDynTree::SpatialForceVectorRaw::inverse((iDynTree::SpatialForceVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_inverse.");
}


void _wrap_SpatialForceVectorRaw_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_dot" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_dot" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_dot" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = (double)((iDynTree::SpatialForceVectorRaw const *)arg1)->dot((iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_dot.");
}


void _wrap_SpatialForceVectorRaw_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_plus" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_plus" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = ((iDynTree::SpatialForceVectorRaw const *)arg1)->operator +((iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_plus.");
}


void _wrap_SpatialForceVectorRaw_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_minus" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialForceVectorRaw_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialForceVectorRaw_minus" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = ((iDynTree::SpatialForceVectorRaw const *)arg1)->operator -((iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_minus.");
}


void _wrap_SpatialForceVectorRaw_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = (iDynTree::SpatialForceVectorRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialForceVectorRaw_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialForceVectorRaw_uminus" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  result = ((iDynTree::SpatialForceVectorRaw const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialForceVectorRaw_uminus.");
}


void _wrap_new_SpatialMotionVectorRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::SpatialMotionVectorRaw *)new iDynTree::SpatialMotionVectorRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialMotionVectorRaw.");
}


void _wrap_new_SpatialMotionVectorRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorRaw",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorRaw" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SpatialMotionVectorRaw" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::SpatialMotionVectorRaw *)new iDynTree::SpatialMotionVectorRaw((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialMotionVectorRaw.");
}


void _wrap_new_SpatialMotionVectorRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_SpatialMotionVectorRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpatialMotionVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpatialMotionVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  result = (iDynTree::SpatialMotionVectorRaw *)new iDynTree::SpatialMotionVectorRaw((iDynTree::SpatialMotionVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_SpatialMotionVectorRaw.");
}


void _wrap_new_SpatialMotionVectorRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_SpatialMotionVectorRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SpatialMotionVectorRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SpatialMotionVectorRaw__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_SpatialMotionVectorRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_SpatialMotionVectorRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpatialMotionVectorRaw" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_SpatialMotionVectorRaw.");
}


void _wrap_SpatialMotionVectorRaw_changePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_changePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_changePoint" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_changePoint" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::SpatialMotionVectorRaw *) &(arg1)->changePoint((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_changePoint.");
}


void _wrap_SpatialMotionVectorRaw_changeCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw *result = 0 ;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_changeCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_changeCoordFrame" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_changeCoordFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::SpatialMotionVectorRaw *) &(arg1)->changeCoordFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_changeCoordFrame.");
}


void _wrap_SpatialMotionVectorRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_compose" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_compose" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = iDynTree::SpatialMotionVectorRaw::compose((iDynTree::SpatialMotionVectorRaw const &)*arg1,(iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_compose.");
}


void _wrap_SpatialMotionVectorRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_inverse" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  result = iDynTree::SpatialMotionVectorRaw::inverse((iDynTree::SpatialMotionVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_inverse.");
}


void _wrap_SpatialMotionVectorRaw_dot (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_dot",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_dot" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_dot" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_dot" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = (double)((iDynTree::SpatialMotionVectorRaw const *)arg1)->dot((iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_dot.");
}


void _wrap_SpatialMotionVectorRaw_plus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_plus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_plus" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_plus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = ((iDynTree::SpatialMotionVectorRaw const *)arg1)->operator +((iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_plus.");
}


void _wrap_SpatialMotionVectorRaw_minus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_minus",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_minus" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpatialMotionVectorRaw_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpatialMotionVectorRaw_minus" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = ((iDynTree::SpatialMotionVectorRaw const *)arg1)->operator -((iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_minus.");
}


void _wrap_SpatialMotionVectorRaw_uminus (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = (iDynTree::SpatialMotionVectorRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("SpatialMotionVectorRaw_uminus",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpatialMotionVectorRaw_uminus" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  result = ((iDynTree::SpatialMotionVectorRaw const *)arg1)->operator -();
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function SpatialMotionVectorRaw_uminus.");
}


void _wrap_new_Twist__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Twist *)new iDynTree::Twist();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Twist.");
}


void _wrap_new_Twist__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Twist" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Twist *)new iDynTree::Twist((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Twist.");
}


void _wrap_new_Twist__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialMotionVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::SpatialMotionVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Twist.");
}


void _wrap_new_Twist__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Twist *result = 0 ;
  
  if (!SWIG_check_num_args("new_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Twist" "', argument " "1"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  result = (iDynTree::Twist *)new iDynTree::Twist((iDynTree::Twist const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Twist, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Twist.");
}


void _wrap_new_Twist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Twist__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Twist__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Twist__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Twist (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Twist *arg1 = (iDynTree::Twist *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Twist",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Twist" "', argument " "1"" of type '" "iDynTree::Twist *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Twist * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Twist.");
}


void _wrap_new_Wrench__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Wrench *)new iDynTree::Wrench();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Wrench.");
}


void _wrap_new_Wrench__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "double const *""'"); 
  }
  arg1 = reinterpret_cast< double * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Wrench" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((double const *)arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Wrench.");
}


void _wrap_new_Wrench__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::SpatialForceVectorRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::SpatialForceVectorRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Wrench.");
}


void _wrap_new_Wrench__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Wrench *result = 0 ;
  
  if (!SWIG_check_num_args("new_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  result = (iDynTree::Wrench *)new iDynTree::Wrench((iDynTree::Wrench const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Wrench, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Wrench.");
}


void _wrap_new_Wrench (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Wrench__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Wrench__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Wrench__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Wrench (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Wrench *arg1 = (iDynTree::Wrench *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Wrench",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Wrench" "', argument " "1"" of type '" "iDynTree::Wrench *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Wrench * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Wrench.");
}


void _wrap_new_RotationRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationRaw.");
}


void _wrap_new_RotationRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationRaw" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RotationRaw" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RotationRaw" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_RotationRaw" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_RotationRaw" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_RotationRaw" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_RotationRaw" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_RotationRaw" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationRaw.");
}


void _wrap_new_RotationRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::RotationRaw *)new iDynTree::RotationRaw((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationRaw.");
}


void _wrap_new_RotationRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_RotationRaw__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_RotationRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_RotationRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_RotationRaw.");
}


void _wrap_RotationRaw_TODOparen__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RotationRaw_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_TODOparen" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::RotationRaw const *)arg1)->operator ()(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_TODOparen.");
}


void _wrap_RotationRaw_TODOparen__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_TODOparen",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_TODOparen" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_TODOparen" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_TODOparen" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double *) &(arg1)->operator ()(arg2,arg3);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_TODOparen.");
}


void _wrap_RotationRaw_TODOparen (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RotationRaw_TODOparen__SWIG_0(resc,resv,argc,argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RotationRaw_TODOparen__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_RotationRaw_getVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  double result;
  
  if (!SWIG_check_num_args("RotationRaw_getVal",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_getVal" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_getVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_getVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  result = (double)((iDynTree::RotationRaw const *)arg1)->getVal(arg2,arg3);
  _out = SWIG_From_double(static_cast< double >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_getVal.");
}


void _wrap_RotationRaw_setVal (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationRaw_setVal",argc,4,4,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_setVal" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_setVal" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_setVal" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RotationRaw_setVal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->setVal(arg2,arg3,arg4);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_setVal.");
}


void _wrap_RotationRaw_rows (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("RotationRaw_rows",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_rows" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (unsigned int)((iDynTree::RotationRaw const *)arg1)->rows();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_rows.");
}


void _wrap_RotationRaw_cols (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  unsigned int result;
  
  if (!SWIG_check_num_args("RotationRaw_cols",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_cols" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (unsigned int)((iDynTree::RotationRaw const *)arg1)->cols();
  _out = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_cols.");
}


void _wrap_RotationRaw_data__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_data" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (double *)((iDynTree::RotationRaw const *)arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_data.");
}


void _wrap_RotationRaw_data__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  double *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_data",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_data" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (double *)(arg1)->data();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_data.");
}


void _wrap_RotationRaw_data (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RotationRaw_data__SWIG_1(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RotationRaw_data__SWIG_0(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_RotationRaw_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_changeOrientFrame.");
}


void _wrap_RotationRaw_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw *result = 0 ;
  
  if (!SWIG_check_num_args("RotationRaw_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (iDynTree::RotationRaw *) &(arg1)->changeRefOrientFrame((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_changeRefOrientFrame.");
}


void _wrap_RotationRaw_convertToNewCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_convertToNewCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_convertToNewCoordFrame" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->convertToNewCoordFrame((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_convertToNewCoordFrame.");
}


void _wrap_RotationRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_compose" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = iDynTree::RotationRaw::compose((iDynTree::RotationRaw const &)*arg1,(iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_compose.");
}


void _wrap_RotationRaw_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_inverse2" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = iDynTree::RotationRaw::inverse2((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_inverse2.");
}


void _wrap_RotationRaw_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_mtimes" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_mtimes" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_mtimes" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->operator *((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_mtimes.");
}


void _wrap_RotationRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_inverse" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_inverse.");
}


void _wrap_RotationRaw_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_mtimes" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationRaw_mtimes" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationRaw_mtimes" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = ((iDynTree::RotationRaw const *)arg1)->operator *((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_mtimes.");
}


void _wrap_RotationRaw_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RotationRaw_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_RotationRaw_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_toString" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_toString.");
}


void _wrap_RotationRaw_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = (iDynTree::RotationRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationRaw_display" "', argument " "1"" of type '" "iDynTree::RotationRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = ((iDynTree::RotationRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_display.");
}


void _wrap_RotationRaw_RotX (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotX",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotX" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotX(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_RotX.");
}


void _wrap_RotationRaw_RotY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotY",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotY(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_RotY.");
}


void _wrap_RotationRaw_RotZ (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RotZ",argc,1,1,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RotZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = iDynTree::RotationRaw::RotZ(arg1);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_RotZ.");
}


void _wrap_RotationRaw_RPY (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  mxArray * _out;
  iDynTree::RotationRaw result;
  
  if (!SWIG_check_num_args("RotationRaw_RPY",argc,3,3,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RotationRaw_RPY" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationRaw_RPY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RotationRaw_RPY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = iDynTree::RotationRaw::RPY(arg1,arg2,arg3);
  _out = SWIG_NewPointerObj((new iDynTree::RotationRaw(static_cast< const iDynTree::RotationRaw& >(result))), SWIGTYPE_p_iDynTree__RotationRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationRaw_RPY.");
}


void _wrap_new_RotationSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationSemantics.");
}


void _wrap_new_RotationSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_int(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RotationSemantics" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics(arg1,arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationSemantics.");
}


void _wrap_new_RotationSemantics__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (iDynTree::RotationSemantics *)new iDynTree::RotationSemantics((iDynTree::RotationSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_RotationSemantics.");
}


void _wrap_new_RotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_RotationSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RotationSemantics__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_RotationSemantics__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_RotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_RotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RotationSemantics" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_RotationSemantics.");
}


void _wrap_RotationSemantics_getOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_getOrientationFrame.");
}


void _wrap_RotationSemantics_getReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getReferenceOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getReferenceOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_getReferenceOrientationFrame.");
}


void _wrap_RotationSemantics_getCoordinateFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("RotationSemantics_getCoordinateFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_getCoordinateFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = (int)((iDynTree::RotationSemantics const *)arg1)->getCoordinateFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_getCoordinateFrame.");
}


void _wrap_RotationSemantics_setOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_setOrientationFrame.");
}


void _wrap_RotationSemantics_setReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("RotationSemantics_setReferenceOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RotationSemantics_setReferenceOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferenceOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_setReferenceOrientationFrame.");
}


void _wrap_RotationSemantics_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_changeOrientFrame.");
}


void _wrap_RotationSemantics_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->changeRefOrientFrame((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_changeRefOrientFrame.");
}


void _wrap_RotationSemantics_convertToNewCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_convertToNewCoordFrame",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_convertToNewCoordFrame" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_convertToNewCoordFrame" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_convertToNewCoordFrame" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  result = (bool)((iDynTree::RotationSemantics const *)arg1)->convertToNewCoordFrame((iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_convertToNewCoordFrame.");
}


void _wrap_RotationSemantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  iDynTree::RotationSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_compose" "', argument " "3"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::RotationSemantics * >(argp3);
  result = (bool)iDynTree::RotationSemantics::compose((iDynTree::RotationSemantics const &)*arg1,(iDynTree::RotationSemantics const &)*arg2,*arg3);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_compose.");
}


void _wrap_RotationSemantics_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("RotationSemantics_inverse2",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RotationSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::RotationSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)iDynTree::RotationSemantics::inverse2((iDynTree::RotationSemantics const &)*arg1,*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_inverse2.");
}


void _wrap_RotationSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_toString" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_toString.");
}


void _wrap_RotationSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationSemantics *arg1 = (iDynTree::RotationSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("RotationSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RotationSemantics_display" "', argument " "1"" of type '" "iDynTree::RotationSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationSemantics * >(argp1);
  result = ((iDynTree::RotationSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function RotationSemantics_display.");
}


void _wrap_new_Rotation__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Rotation *)new iDynTree::Rotation();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Rotation.");
}


void _wrap_new_Rotation__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,9,9,0)) {
    SWIG_fail;
  }
  ecode1 = SWIG_AsVal_double(argv[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rotation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(argv[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rotation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(argv[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Rotation" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(argv[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Rotation" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(argv[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Rotation" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(argv[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_Rotation" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(argv[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_Rotation" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(argv[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_Rotation" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (iDynTree::Rotation *)new iDynTree::Rotation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Rotation.");
}


void _wrap_new_Rotation__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::RotationRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Rotation.");
}


void _wrap_new_Rotation__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("new_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::Rotation *)new iDynTree::Rotation((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Rotation.");
}


void _wrap_new_Rotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Rotation__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rotation__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 9) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_Rotation__SWIG_1(resc,resv,argc,argv);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Rotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Rotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotation" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Rotation.");
}


void _wrap_Rotation_getSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getSemantics" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::RotationSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_getSemantics.");
}


void _wrap_Rotation_getSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_getSemantics" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = (iDynTree::RotationSemantics *) &((iDynTree::Rotation const *)arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__RotationSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_getSemantics.");
}


void _wrap_Rotation_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Rotation_getSemantics__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Rotation_getSemantics__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Rotation_changeOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_changeOrientFrame.");
}


void _wrap_Rotation_changeRefOrientFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation *result = 0 ;
  
  if (!SWIG_check_num_args("Rotation_changeRefOrientFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_changeRefOrientFrame" "', argument " "1"" of type '" "iDynTree::Rotation *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_changeRefOrientFrame" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (iDynTree::Rotation *) &(arg1)->changeRefOrientFrame((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_changeRefOrientFrame.");
}


void _wrap_Rotation_convertToNewCoordFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_convertToNewCoordFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_convertToNewCoordFrame" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_convertToNewCoordFrame" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->convertToNewCoordFrame((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_convertToNewCoordFrame.");
}


void _wrap_Rotation_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_compose" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = iDynTree::Rotation::compose((iDynTree::Rotation const &)*arg1,(iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_compose.");
}


void _wrap_Rotation_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_inverse2" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = iDynTree::Rotation::inverse2((iDynTree::Rotation const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_inverse2.");
}


void _wrap_Rotation_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Rotation const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_mtimes.");
}


void _wrap_Rotation_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Rotation_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_inverse" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_inverse.");
}


void _wrap_Rotation_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Rotation_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_mtimes" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Rotation const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_mtimes.");
}


void _wrap_Rotation_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Rotation_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Rotation_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_toString" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_toString.");
}


void _wrap_Rotation_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = (iDynTree::Rotation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Rotation_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Rotation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_display" "', argument " "1"" of type '" "iDynTree::Rotation const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  result = ((iDynTree::Rotation const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Rotation_display.");
}


void _wrap_new_TransformRaw__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::TransformRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformRaw",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::TransformRaw *)new iDynTree::TransformRaw();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_TransformRaw.");
}


void _wrap_new_TransformRaw__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::RotationRaw *arg1 = 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformRaw",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformRaw" "', argument " "1"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::RotationRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformRaw" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (iDynTree::TransformRaw *)new iDynTree::TransformRaw((iDynTree::RotationRaw const &)*arg1,(iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_TransformRaw.");
}


void _wrap_new_TransformRaw__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformRaw" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformRaw" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = (iDynTree::TransformRaw *)new iDynTree::TransformRaw((iDynTree::TransformRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformRaw, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_TransformRaw.");
}


void _wrap_new_TransformRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_TransformRaw__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransformRaw__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TransformRaw__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_TransformRaw (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_TransformRaw",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformRaw" "', argument " "1"" of type '" "iDynTree::TransformRaw *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_TransformRaw.");
}


void _wrap_TransformRaw_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  iDynTree::TransformRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_compose" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_compose" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_compose" "', argument " "2"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_compose" "', argument " "2"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformRaw * >(argp2);
  result = iDynTree::TransformRaw::compose((iDynTree::TransformRaw const &)*arg1,(iDynTree::TransformRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformRaw(static_cast< const iDynTree::TransformRaw& >(result))), SWIGTYPE_p_iDynTree__TransformRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_compose.");
}


void _wrap_TransformRaw_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_inverse2" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_inverse2" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = iDynTree::TransformRaw::inverse2((iDynTree::TransformRaw const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::TransformRaw(static_cast< const iDynTree::TransformRaw& >(result))), SWIGTYPE_p_iDynTree__TransformRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_inverse2.");
}


void _wrap_TransformRaw_transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = iDynTree::TransformRaw::transform((iDynTree::TransformRaw const &)*arg1,(iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_transform.");
}


void _wrap_TransformRaw_transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = iDynTree::TransformRaw::transform((iDynTree::TransformRaw const &)*arg1,(iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_transform.");
}


void _wrap_TransformRaw_transform__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_transform" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = iDynTree::TransformRaw::transform((iDynTree::TransformRaw const &)*arg1,(iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_transform.");
}


void _wrap_TransformRaw_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_transform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_transform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_transform__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformRaw_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  iDynTree::TransformRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_mtimes" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformRaw * >(argp2);
  result = ((iDynTree::TransformRaw const *)arg1)->operator *((iDynTree::TransformRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformRaw(static_cast< const iDynTree::TransformRaw& >(result))), SWIGTYPE_p_iDynTree__TransformRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_mtimes.");
}


void _wrap_TransformRaw_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_inverse" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = ((iDynTree::TransformRaw const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::TransformRaw(static_cast< const iDynTree::TransformRaw& >(result))), SWIGTYPE_p_iDynTree__TransformRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_inverse.");
}


void _wrap_TransformRaw_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_mtimes" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = ((iDynTree::TransformRaw const *)arg1)->operator *((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionRaw(static_cast< const iDynTree::PositionRaw& >(result))), SWIGTYPE_p_iDynTree__PositionRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_mtimes.");
}


void _wrap_TransformRaw_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  iDynTree::SpatialMotionVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialMotionVectorRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_mtimes" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialMotionVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialMotionVectorRaw * >(argp2);
  result = ((iDynTree::TransformRaw const *)arg1)->operator *((iDynTree::SpatialMotionVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialMotionVectorRaw(static_cast< const iDynTree::SpatialMotionVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_mtimes.");
}


void _wrap_TransformRaw_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  iDynTree::SpatialForceVectorRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::SpatialForceVectorRaw result;
  
  if (!SWIG_check_num_args("TransformRaw_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_mtimes" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformRaw_mtimes" "', argument " "2"" of type '" "iDynTree::SpatialForceVectorRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::SpatialForceVectorRaw * >(argp2);
  result = ((iDynTree::TransformRaw const *)arg1)->operator *((iDynTree::SpatialForceVectorRaw const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::SpatialForceVectorRaw(static_cast< const iDynTree::SpatialForceVectorRaw& >(result))), SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_mtimes.");
}


void _wrap_TransformRaw_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialMotionVectorRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__SpatialForceVectorRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformRaw_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformRaw_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformRaw_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_toString" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = ((iDynTree::TransformRaw const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_toString.");
}


void _wrap_TransformRaw_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = (iDynTree::TransformRaw *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformRaw_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformRaw, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformRaw_display" "', argument " "1"" of type '" "iDynTree::TransformRaw const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = ((iDynTree::TransformRaw const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformRaw_display.");
}


void _wrap_new_TransformSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformSemantics",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::TransformSemantics *)new iDynTree::TransformSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_TransformSemantics.");
}


void _wrap_new_TransformSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("new_TransformSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (iDynTree::TransformSemantics *)new iDynTree::TransformSemantics((iDynTree::TransformSemantics const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_TransformSemantics.");
}


void _wrap_new_TransformSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_TransformSemantics__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TransformSemantics__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_TransformSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_TransformSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_TransformSemantics.");
}


void _wrap_TransformSemantics_getRotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::RotationSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_getRotationSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->getRotationSemantics();
  _out = SWIG_NewPointerObj((new iDynTree::RotationSemantics(static_cast< const iDynTree::RotationSemantics& >(result))), SWIGTYPE_p_iDynTree__RotationSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getRotationSemantics.");
}


void _wrap_TransformSemantics_getPositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_getPositionSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->getPositionSemantics();
  _out = SWIG_NewPointerObj((new iDynTree::PositionSemantics(static_cast< const iDynTree::PositionSemantics& >(result))), SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getPositionSemantics.");
}


void _wrap_TransformSemantics_setRotationSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::RotationSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setRotationSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setRotationSemantics" "', argument " "2"" of type '" "iDynTree::RotationSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationSemantics * >(argp2);
  result = (bool)(arg1)->setRotationSemantics((iDynTree::RotationSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setRotationSemantics.");
}


void _wrap_TransformSemantics_setPositionSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_setPositionSemantics",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_setPositionSemantics" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)(arg1)->setPositionSemantics((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setPositionSemantics.");
}


void _wrap_TransformSemantics_getPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TransformSemantics_getPoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getPoint" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (int)((iDynTree::TransformSemantics const *)arg1)->getPoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getPoint.");
}


void _wrap_TransformSemantics_getOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TransformSemantics_getOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getOrientationFrame" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (int)((iDynTree::TransformSemantics const *)arg1)->getOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getOrientationFrame.");
}


void _wrap_TransformSemantics_getReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TransformSemantics_getReferencePoint",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getReferencePoint" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (int)((iDynTree::TransformSemantics const *)arg1)->getReferencePoint();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getReferencePoint.");
}


void _wrap_TransformSemantics_getReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  int result;
  
  if (!SWIG_check_num_args("TransformSemantics_getReferenceOrientationFrame",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_getReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (int)((iDynTree::TransformSemantics const *)arg1)->getReferenceOrientationFrame();
  _out = SWIG_From_int(static_cast< int >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_getReferenceOrientationFrame.");
}


void _wrap_TransformSemantics_setPoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_setPoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setPoint" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformSemantics_setPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setPoint(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setPoint.");
}


void _wrap_TransformSemantics_setOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_setOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setOrientationFrame" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformSemantics_setOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setOrientationFrame.");
}


void _wrap_TransformSemantics_setReferencePoint (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_setReferencePoint",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setReferencePoint" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformSemantics_setReferencePoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferencePoint(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setReferencePoint.");
}


void _wrap_TransformSemantics_setReferenceOrientationFrame (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_setReferenceOrientationFrame",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_setReferenceOrientationFrame" "', argument " "1"" of type '" "iDynTree::TransformSemantics *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  ecode2 = SWIG_AsVal_int(argv[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TransformSemantics_setReferenceOrientationFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->setReferenceOrientationFrame(arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_setReferenceOrientationFrame.");
}


void _wrap_TransformSemantics_check_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::TransformSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_check_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_check_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_check_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_check_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_check_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformSemantics * >(argp2);
  result = (bool)iDynTree::TransformSemantics::check_compose((iDynTree::TransformSemantics const &)*arg1,(iDynTree::TransformSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_check_compose.");
}


void _wrap_TransformSemantics_check_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_check_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_check_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_check_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = (bool)iDynTree::TransformSemantics::check_inverse2((iDynTree::TransformSemantics const &)*arg1);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_check_inverse2.");
}


void _wrap_TransformSemantics_check_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("TransformSemantics_check_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_check_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_check_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_check_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_check_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = (bool)iDynTree::TransformSemantics::check_transform((iDynTree::TransformSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_check_transform.");
}


void _wrap_TransformSemantics_compose__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::TransformSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformSemantics * >(argp2);
  result = iDynTree::TransformSemantics::compose((iDynTree::TransformSemantics const &)*arg1,(iDynTree::TransformSemantics const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformSemantics(static_cast< const iDynTree::TransformSemantics& >(result))), SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_compose.");
}


void _wrap_TransformSemantics_compose__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::TransformSemantics *arg2 = 0 ;
  iDynTree::TransformSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_compose",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_compose" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_compose" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformSemantics_compose" "', argument " "3"" of type '" "iDynTree::TransformSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_compose" "', argument " "3"" of type '" "iDynTree::TransformSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::TransformSemantics * >(argp3);
  iDynTree::TransformSemantics::compose((iDynTree::TransformSemantics const &)*arg1,(iDynTree::TransformSemantics const &)*arg2,*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_compose.");
}


void _wrap_TransformSemantics_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformSemantics_compose__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransformSemantics_compose__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformSemantics_inverse2__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = iDynTree::TransformSemantics::inverse2((iDynTree::TransformSemantics const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::TransformSemantics(static_cast< const iDynTree::TransformSemantics& >(result))), SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_inverse2.");
}


void _wrap_TransformSemantics_inverse2__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::TransformSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_inverse2",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_inverse2" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::TransformSemantics &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_inverse2" "', argument " "2"" of type '" "iDynTree::TransformSemantics &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformSemantics * >(argp2);
  iDynTree::TransformSemantics::inverse2((iDynTree::TransformSemantics const &)*arg1,*arg2);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_inverse2.");
}


void _wrap_TransformSemantics_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TransformSemantics_inverse2__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformSemantics_inverse2__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformSemantics_transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = iDynTree::TransformSemantics::transform((iDynTree::TransformSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionSemantics(static_cast< const iDynTree::PositionSemantics& >(result))), SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_transform.");
}


void _wrap_TransformSemantics_transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  iDynTree::PositionSemantics *arg3 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("TransformSemantics_transform",argc,3,3,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_transform" "', argument " "1"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_transform" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  res3 = SWIG_ConvertPtr(argv[2], &argp3, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TransformSemantics_transform" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_transform" "', argument " "3"" of type '" "iDynTree::PositionSemantics &""'"); 
  }
  arg3 = reinterpret_cast< iDynTree::PositionSemantics * >(argp3);
  iDynTree::TransformSemantics::transform((iDynTree::TransformSemantics const &)*arg1,(iDynTree::PositionSemantics const &)*arg2,*arg3);
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_transform.");
}


void _wrap_TransformSemantics_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformSemantics_transform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TransformSemantics_transform__SWIG_1(resc,resv,argc,argv);
        }
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformSemantics_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::TransformSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_mtimes" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__TransformSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_mtimes" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_mtimes" "', argument " "2"" of type '" "iDynTree::TransformSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::TransformSemantics * >(argp2);
  result = ((iDynTree::TransformSemantics const *)arg1)->operator *((iDynTree::TransformSemantics const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::TransformSemantics(static_cast< const iDynTree::TransformSemantics& >(result))), SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_mtimes.");
}


void _wrap_TransformSemantics_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_inverse" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::TransformSemantics(static_cast< const iDynTree::TransformSemantics& >(result))), SWIGTYPE_p_iDynTree__TransformSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_inverse.");
}


void _wrap_TransformSemantics_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  iDynTree::PositionSemantics *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::PositionSemantics result;
  
  if (!SWIG_check_num_args("TransformSemantics_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_mtimes" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionSemantics,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformSemantics_mtimes" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformSemantics_mtimes" "', argument " "2"" of type '" "iDynTree::PositionSemantics const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionSemantics * >(argp2);
  result = ((iDynTree::TransformSemantics const *)arg1)->operator *((iDynTree::PositionSemantics const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::PositionSemantics(static_cast< const iDynTree::PositionSemantics& >(result))), SWIGTYPE_p_iDynTree__PositionSemantics, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_mtimes.");
}


void _wrap_TransformSemantics_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformSemantics_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformSemantics, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionSemantics, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TransformSemantics_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_TransformSemantics_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_toString" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_toString.");
}


void _wrap_TransformSemantics_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformSemantics *arg1 = (iDynTree::TransformSemantics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("TransformSemantics_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformSemantics_display" "', argument " "1"" of type '" "iDynTree::TransformSemantics const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformSemantics * >(argp1);
  result = ((iDynTree::TransformSemantics const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function TransformSemantics_display.");
}


void _wrap_new_Transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,0,0,0)) {
    SWIG_fail;
  }
  result = (iDynTree::Transform *)new iDynTree::Transform();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Transform.");
}


void _wrap_new_Transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Rotation *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Rotation * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Rotation const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Transform.");
}


void _wrap_new_Transform__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::TransformRaw *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__TransformRaw,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::TransformRaw const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::TransformRaw * >(argp1);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::TransformRaw const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Transform.");
}


void _wrap_new_Transform__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform *result = 0 ;
  
  if (!SWIG_check_num_args("new_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::Transform *)new iDynTree::Transform((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__Transform, 1 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function new_Transform.");
}


void _wrap_new_Transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_0(resc,resv,argc,argv);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_3(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__TransformRaw, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Transform__SWIG_2(resc,resv,argc,argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Transform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_delete_Transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  
  if (!SWIG_check_num_args("delete_Transform",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  delete arg1;
  _out = (mxArray*)0;
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function delete_Transform.");
}


void _wrap_Transform_getSemantics__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getSemantics" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::TransformSemantics *) &(arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_getSemantics.");
}


void _wrap_Transform_getSemantics__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::TransformSemantics *result = 0 ;
  
  if (!SWIG_check_num_args("Transform_getSemantics",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getSemantics" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = (iDynTree::TransformSemantics *) &((iDynTree::Transform const *)arg1)->getSemantics();
  _out = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_iDynTree__TransformSemantics, 0 |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_getSemantics.");
}


void _wrap_Transform_getSemantics (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Transform_getSemantics__SWIG_0(resc,resv,argc,argv);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Transform_getSemantics__SWIG_1(resc,resv,argc,argv);
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Transform_getRotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Rotation result;
  
  if (!SWIG_check_num_args("Transform_getRotation",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getRotation" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->getRotation();
  _out = SWIG_NewPointerObj((new iDynTree::Rotation(static_cast< const iDynTree::Rotation& >(result))), SWIGTYPE_p_iDynTree__Rotation, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_getRotation.");
}


void _wrap_Transform_getPosition (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Transform_getPosition",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_getPosition" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->getPosition();
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_getPosition.");
}


void _wrap_Transform_setRotation__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Rotation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Transform_setRotation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setRotation" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Rotation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::Rotation const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Rotation * >(argp2);
  result = (bool)(arg1)->setRotation((iDynTree::Rotation const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_setRotation.");
}


void _wrap_Transform_setPosition__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Transform_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setPosition" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = (bool)(arg1)->setPosition((iDynTree::Position const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_setPosition.");
}


void _wrap_Transform_setRotation__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::RotationRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Transform_setRotation",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setRotation" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__RotationRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setRotation" "', argument " "2"" of type '" "iDynTree::RotationRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::RotationRaw * >(argp2);
  result = (bool)(arg1)->setRotation((iDynTree::RotationRaw const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_setRotation.");
}


void _wrap_Transform_setRotation (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Rotation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_setRotation__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__RotationRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_setRotation__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Transform_setPosition__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::PositionRaw *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  bool result;
  
  if (!SWIG_check_num_args("Transform_setPosition",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_setPosition" "', argument " "1"" of type '" "iDynTree::Transform *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__PositionRaw,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_setPosition" "', argument " "2"" of type '" "iDynTree::PositionRaw const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::PositionRaw * >(argp2);
  result = (bool)(arg1)->setPosition((iDynTree::PositionRaw const &)*arg2);
  _out = SWIG_From_bool(static_cast< bool >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_setPosition.");
}


void _wrap_Transform_setPosition (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_setPosition__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__PositionRaw, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_setPosition__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Transform_compose (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_compose",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_compose" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = iDynTree::Transform::compose((iDynTree::Transform const &)*arg1,(iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_compose.");
}


void _wrap_Transform_inverse2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse2",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_inverse2" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = iDynTree::Transform::inverse2((iDynTree::Transform const &)*arg1);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_inverse2.");
}


void _wrap_Transform_transform__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Transform_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = iDynTree::Transform::transform((iDynTree::Transform const &)*arg1,(iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_transform.");
}


void _wrap_Transform_transform__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Transform_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = iDynTree::Transform::transform((iDynTree::Transform const &)*arg1,(iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_transform.");
}


void _wrap_Transform_transform__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Transform_transform",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "1"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_transform" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = iDynTree::Transform::transform((iDynTree::Transform const &)*arg1,(iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_transform.");
}


void _wrap_Transform_transform (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_transform__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_transform__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_transform__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Transform_mtimes__SWIG_0 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Transform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Transform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Transform const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Transform * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Transform const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_mtimes.");
}


void _wrap_Transform_inverse (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  iDynTree::Transform result;
  
  if (!SWIG_check_num_args("Transform_inverse",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->inverse();
  _out = SWIG_NewPointerObj((new iDynTree::Transform(static_cast< const iDynTree::Transform& >(result))), SWIGTYPE_p_iDynTree__Transform, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_inverse.");
}


void _wrap_Transform_mtimes__SWIG_1 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Position *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Position result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Position,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Position const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Position * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Position const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Position(static_cast< const iDynTree::Position& >(result))), SWIGTYPE_p_iDynTree__Position, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_mtimes.");
}


void _wrap_Transform_mtimes__SWIG_2 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Wrench *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Wrench result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Wrench,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Wrench const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Wrench * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Wrench const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Wrench(static_cast< const iDynTree::Wrench& >(result))), SWIGTYPE_p_iDynTree__Wrench, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_mtimes.");
}


void _wrap_Transform_mtimes__SWIG_3 (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  iDynTree::Twist *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  mxArray * _out;
  iDynTree::Twist result;
  
  if (!SWIG_check_num_args("Transform_mtimes",argc,2,2,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_mtimes" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  res2 = SWIG_ConvertPtr(argv[1], &argp2, SWIGTYPE_p_iDynTree__Twist,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_mtimes" "', argument " "2"" of type '" "iDynTree::Twist const &""'"); 
  }
  arg2 = reinterpret_cast< iDynTree::Twist * >(argp2);
  result = ((iDynTree::Transform const *)arg1)->operator *((iDynTree::Twist const &)*arg2);
  _out = SWIG_NewPointerObj((new iDynTree::Twist(static_cast< const iDynTree::Twist& >(result))), SWIGTYPE_p_iDynTree__Twist, SWIG_POINTER_OWN |  0 );
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_mtimes.");
}


void _wrap_Transform_mtimes (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_0(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Position, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_1(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Wrench, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_2(resc,resv,argc,argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_iDynTree__Transform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_iDynTree__Twist, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Transform_mtimes__SWIG_3(resc,resv,argc,argv);
      }
    }
  }
  
  mexWarnMsgIdAndTxt("SWIG:RuntimeError","No matching function for overload");
  return;
}


void _wrap_Transform_toString (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_toString",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_toString" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->toString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_toString.");
}


void _wrap_Transform_display (int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  iDynTree::Transform *arg1 = (iDynTree::Transform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mxArray * _out;
  std::string result;
  
  if (!SWIG_check_num_args("Transform_display",argc,1,1,0)) {
    SWIG_fail;
  }
  res1 = SWIG_ConvertPtr(argv[0], &argp1,SWIGTYPE_p_iDynTree__Transform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_display" "', argument " "1"" of type '" "iDynTree::Transform const *""'"); 
  }
  arg1 = reinterpret_cast< iDynTree::Transform * >(argp1);
  result = ((iDynTree::Transform const *)arg1)->reservedToString();
  _out = SWIG_From_std_string(static_cast< std::string >(result));
  if (_out && --resc>=0) *resv++ = _out;
  return;
fail:
  mexErrMsgTxt("Failure in function Transform_display.");
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_iDynTree__MatrixDynSizeTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *)  ((iDynTree::MatrixDynSize *) x));
}
static void *_p_iDynTree__RotationRawTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *)  ((iDynTree::RotationRaw *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__IMatrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IMatrix *) (iDynTree::RotationRaw *) ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__RotationTo_p_iDynTree__RotationRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::RotationRaw *)  ((iDynTree::Rotation *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__PositionRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::PositionRaw *)  ((iDynTree::Position *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVectorRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialMotionVectorRaw *)  ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVectorRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::SpatialForceVectorRaw *)  ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::Vector6 *)(iDynTree::SpatialForceVectorRaw *) ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__VectorDynSizeTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::VectorDynSize *) x));
}
static void *_p_iDynTree__PositionTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::PositionRaw *) ((iDynTree::Position *) x));
}
static void *_p_iDynTree__Vector6To_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::Vector6 *) x));
}
static void *_p_iDynTree__SpatialForceVectorRawTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::Vector6 *) ((iDynTree::SpatialForceVectorRaw *) x));
}
static void *_p_iDynTree__SpatialMotionVectorRawTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::Vector6 *) ((iDynTree::SpatialMotionVectorRaw *) x));
}
static void *_p_iDynTree__PositionRawTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *)  ((iDynTree::PositionRaw *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__IVector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::IVector *) (iDynTree::Vector6 *)(iDynTree::SpatialMotionVectorRaw *) ((iDynTree::Twist *) x));
}
static void *_p_iDynTree__TransformTo_p_iDynTree__TransformRaw(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::TransformRaw *)  ((iDynTree::Transform *) x));
}
static void *_p_iDynTree__WrenchTo_p_iDynTree__Vector6(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Vector6 *) (iDynTree::SpatialForceVectorRaw *) ((iDynTree::Wrench *) x));
}
static void *_p_iDynTree__SpatialForceVectorRawTo_p_iDynTree__Vector6(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Vector6 *)  ((iDynTree::SpatialForceVectorRaw *) x));
}
static void *_p_iDynTree__SpatialMotionVectorRawTo_p_iDynTree__Vector6(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Vector6 *)  ((iDynTree::SpatialMotionVectorRaw *) x));
}
static void *_p_iDynTree__TwistTo_p_iDynTree__Vector6(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((iDynTree::Vector6 *) (iDynTree::SpatialMotionVectorRaw *) ((iDynTree::Twist *) x));
}
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iDynTree__IMatrix = {"_p_iDynTree__IMatrix", "iDynTree::IMatrix *", 0, 0, (void*)"iDynTree.IMatrix", 0};
static swig_type_info _swigt__p_iDynTree__IVector = {"_p_iDynTree__IVector", "iDynTree::IVector *", 0, 0, (void*)"iDynTree.IVector", 0};
static swig_type_info _swigt__p_iDynTree__MatrixDynSize = {"_p_iDynTree__MatrixDynSize", "iDynTree::MatrixDynSize *", 0, 0, (void*)"iDynTree.MatrixDynSize", 0};
static swig_type_info _swigt__p_iDynTree__Position = {"_p_iDynTree__Position", "iDynTree::Position *", 0, 0, (void*)"iDynTree.Position", 0};
static swig_type_info _swigt__p_iDynTree__PositionRaw = {"_p_iDynTree__PositionRaw", "iDynTree::PositionRaw *", 0, 0, (void*)"iDynTree.PositionRaw", 0};
static swig_type_info _swigt__p_iDynTree__PositionSemantics = {"_p_iDynTree__PositionSemantics", "iDynTree::PositionSemantics *", 0, 0, (void*)"iDynTree.PositionSemantics", 0};
static swig_type_info _swigt__p_iDynTree__Rotation = {"_p_iDynTree__Rotation", "iDynTree::Rotation *", 0, 0, (void*)"iDynTree.Rotation", 0};
static swig_type_info _swigt__p_iDynTree__RotationRaw = {"_p_iDynTree__RotationRaw", "iDynTree::RotationRaw *", 0, 0, (void*)"iDynTree.RotationRaw", 0};
static swig_type_info _swigt__p_iDynTree__RotationSemantics = {"_p_iDynTree__RotationSemantics", "iDynTree::RotationSemantics *", 0, 0, (void*)"iDynTree.RotationSemantics", 0};
static swig_type_info _swigt__p_iDynTree__SpatialForceVectorRaw = {"_p_iDynTree__SpatialForceVectorRaw", "iDynTree::SpatialForceVectorRaw *", 0, 0, (void*)"iDynTree.SpatialForceVectorRaw", 0};
static swig_type_info _swigt__p_iDynTree__SpatialMotionVectorRaw = {"_p_iDynTree__SpatialMotionVectorRaw", "iDynTree::SpatialMotionVectorRaw *", 0, 0, (void*)"iDynTree.SpatialMotionVectorRaw", 0};
static swig_type_info _swigt__p_iDynTree__Transform = {"_p_iDynTree__Transform", "iDynTree::Transform *", 0, 0, (void*)"iDynTree.Transform", 0};
static swig_type_info _swigt__p_iDynTree__TransformRaw = {"_p_iDynTree__TransformRaw", "iDynTree::TransformRaw *", 0, 0, (void*)"iDynTree.TransformRaw", 0};
static swig_type_info _swigt__p_iDynTree__TransformSemantics = {"_p_iDynTree__TransformSemantics", "iDynTree::TransformSemantics *", 0, 0, (void*)"iDynTree.TransformSemantics", 0};
static swig_type_info _swigt__p_iDynTree__Twist = {"_p_iDynTree__Twist", "iDynTree::Twist *", 0, 0, (void*)"iDynTree.Twist", 0};
static swig_type_info _swigt__p_iDynTree__Vector6 = {"_p_iDynTree__Vector6", "iDynTree::Vector6 *", 0, 0, (void*)"iDynTree.Vector6", 0};
static swig_type_info _swigt__p_iDynTree__VectorDynSize = {"_p_iDynTree__VectorDynSize", "iDynTree::VectorDynSize *", 0, 0, (void*)"iDynTree.VectorDynSize", 0};
static swig_type_info _swigt__p_iDynTree__Wrench = {"_p_iDynTree__Wrench", "iDynTree::Wrench *", 0, 0, (void*)"iDynTree.Wrench", 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_iDynTree__IMatrix,
  &_swigt__p_iDynTree__IVector,
  &_swigt__p_iDynTree__MatrixDynSize,
  &_swigt__p_iDynTree__Position,
  &_swigt__p_iDynTree__PositionRaw,
  &_swigt__p_iDynTree__PositionSemantics,
  &_swigt__p_iDynTree__Rotation,
  &_swigt__p_iDynTree__RotationRaw,
  &_swigt__p_iDynTree__RotationSemantics,
  &_swigt__p_iDynTree__SpatialForceVectorRaw,
  &_swigt__p_iDynTree__SpatialMotionVectorRaw,
  &_swigt__p_iDynTree__Transform,
  &_swigt__p_iDynTree__TransformRaw,
  &_swigt__p_iDynTree__TransformSemantics,
  &_swigt__p_iDynTree__Twist,
  &_swigt__p_iDynTree__Vector6,
  &_swigt__p_iDynTree__VectorDynSize,
  &_swigt__p_iDynTree__Wrench,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IMatrix[] = {  {&_swigt__p_iDynTree__MatrixDynSize, _p_iDynTree__MatrixDynSizeTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__IMatrix, 0, 0, 0},  {&_swigt__p_iDynTree__RotationRaw, _p_iDynTree__RotationRawTo_p_iDynTree__IMatrix, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__IMatrix, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__IVector[] = {  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__IVector, 0, 0, 0},  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__VectorDynSize, _p_iDynTree__VectorDynSizeTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__Vector6, _p_iDynTree__Vector6To_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVectorRaw, _p_iDynTree__SpatialForceVectorRawTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__SpatialMotionVectorRaw, _p_iDynTree__SpatialMotionVectorRawTo_p_iDynTree__IVector, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, _p_iDynTree__PositionRawTo_p_iDynTree__IVector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__MatrixDynSize[] = {  {&_swigt__p_iDynTree__MatrixDynSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Position[] = {  {&_swigt__p_iDynTree__Position, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionRaw[] = {  {&_swigt__p_iDynTree__Position, _p_iDynTree__PositionTo_p_iDynTree__PositionRaw, 0, 0},  {&_swigt__p_iDynTree__PositionRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__PositionSemantics[] = {  {&_swigt__p_iDynTree__PositionSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Rotation[] = {  {&_swigt__p_iDynTree__Rotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationRaw[] = {  {&_swigt__p_iDynTree__RotationRaw, 0, 0, 0},  {&_swigt__p_iDynTree__Rotation, _p_iDynTree__RotationTo_p_iDynTree__RotationRaw, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__RotationSemantics[] = {  {&_swigt__p_iDynTree__RotationSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialForceVectorRaw[] = {  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__SpatialForceVectorRaw, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVectorRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__SpatialMotionVectorRaw[] = {  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__SpatialMotionVectorRaw, 0, 0},  {&_swigt__p_iDynTree__SpatialMotionVectorRaw, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Transform[] = {  {&_swigt__p_iDynTree__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__TransformRaw[] = {  {&_swigt__p_iDynTree__TransformRaw, 0, 0, 0},  {&_swigt__p_iDynTree__Transform, _p_iDynTree__TransformTo_p_iDynTree__TransformRaw, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__TransformSemantics[] = {  {&_swigt__p_iDynTree__TransformSemantics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Twist[] = {  {&_swigt__p_iDynTree__Twist, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Vector6[] = {  {&_swigt__p_iDynTree__Twist, _p_iDynTree__TwistTo_p_iDynTree__Vector6, 0, 0},  {&_swigt__p_iDynTree__Wrench, _p_iDynTree__WrenchTo_p_iDynTree__Vector6, 0, 0},  {&_swigt__p_iDynTree__Vector6, 0, 0, 0},  {&_swigt__p_iDynTree__SpatialForceVectorRaw, _p_iDynTree__SpatialForceVectorRawTo_p_iDynTree__Vector6, 0, 0},  {&_swigt__p_iDynTree__SpatialMotionVectorRaw, _p_iDynTree__SpatialMotionVectorRawTo_p_iDynTree__Vector6, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__VectorDynSize[] = {  {&_swigt__p_iDynTree__VectorDynSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iDynTree__Wrench[] = {  {&_swigt__p_iDynTree__Wrench, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_iDynTree__IMatrix,
  _swigc__p_iDynTree__IVector,
  _swigc__p_iDynTree__MatrixDynSize,
  _swigc__p_iDynTree__Position,
  _swigc__p_iDynTree__PositionRaw,
  _swigc__p_iDynTree__PositionSemantics,
  _swigc__p_iDynTree__Rotation,
  _swigc__p_iDynTree__RotationRaw,
  _swigc__p_iDynTree__RotationSemantics,
  _swigc__p_iDynTree__SpatialForceVectorRaw,
  _swigc__p_iDynTree__SpatialMotionVectorRaw,
  _swigc__p_iDynTree__Transform,
  _swigc__p_iDynTree__TransformRaw,
  _swigc__p_iDynTree__TransformSemantics,
  _swigc__p_iDynTree__Twist,
  _swigc__p_iDynTree__Vector6,
  _swigc__p_iDynTree__VectorDynSize,
  _swigc__p_iDynTree__Wrench,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


static bool is_loaded = false;
void SWIG_Matlab_LoadModule(const char* name) {
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  if(false){
    mexErrMsgIdAndTxt("SWIG:LoadFailure","Could not load module %s",name);
  }

}

extern "C"
void swigConstant(int resc, mxArray *resv[], int argc, mxArray *argv[]) {
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This function should only be called from inside the .m files generated by SWIG. First input should be the constant ID .");
  int con_id = (int)mxGetScalar(*argv++);
  char cmd[256];
  if (--argc < 0 || mxGetString(*argv++, cmd, sizeof(cmd)))
    mexErrMsgTxt("Second input should be a command string less than 256 characters long.");
  int name_ok = 0;
  switch(con_id) {
  default: mexErrMsgIdAndTxt("SWIG:RuntimeError","No constant %s.",cmd);
  }
  if (!name_ok) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError","Mismatching name (%s) for constant %d.",cmd,con_id);
  }
}
extern "C"
void mexFunction(int resc, mxArray *resv[], int argc, const mxArray *argv[]) {
  if (!is_loaded) {
    SWIG_Matlab_LoadModule(SWIG_name_d);
    is_loaded=true;
    mxArray *err;
    mexEvalString("iDynTreesetup");  }
  if (--argc < 0 || !mxIsDouble(*argv) || mxGetNumberOfElements(*argv)!=1)
    mexErrMsgTxt("This mex file should only be called from inside the .m files generated by SWIG. First input should be the function ID .");
  int fcn_id = (int)mxGetScalar(*argv++);
  char cmd[256];
  if (--argc < 0 || mxGetString(*argv++, cmd, sizeof(cmd)))
    mexErrMsgTxt("Second input should be a command string less than 256 characters long.");
  int name_ok = 0;
  switch(fcn_id) {
  case 0: if ((name_ok=!strcmp("swigConstant",cmd))) swigConstant(resc,resv,argc,(mxArray**)(argv)); break;
  case 1: if ((name_ok=!strcmp("delete_IMatrix",cmd))) _wrap_delete_IMatrix(resc,resv,argc,(mxArray**)(argv)); break;
  case 2: if ((name_ok=!strcmp("IMatrix_TODOparen",cmd))) _wrap_IMatrix_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 3: if ((name_ok=!strcmp("IMatrix_getVal",cmd))) _wrap_IMatrix_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 4: if ((name_ok=!strcmp("IMatrix_setVal",cmd))) _wrap_IMatrix_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 5: if ((name_ok=!strcmp("IMatrix_rows",cmd))) _wrap_IMatrix_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 6: if ((name_ok=!strcmp("IMatrix_cols",cmd))) _wrap_IMatrix_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 7: if ((name_ok=!strcmp("delete_IVector",cmd))) _wrap_delete_IVector(resc,resv,argc,(mxArray**)(argv)); break;
  case 8: if ((name_ok=!strcmp("IVector_TODOparen",cmd))) _wrap_IVector_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 9: if ((name_ok=!strcmp("IVector_getVal",cmd))) _wrap_IVector_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 10: if ((name_ok=!strcmp("IVector_setVal",cmd))) _wrap_IVector_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 11: if ((name_ok=!strcmp("IVector_size",cmd))) _wrap_IVector_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 12: if ((name_ok=!strcmp("new_MatrixDynSize",cmd))) _wrap_new_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 13: if ((name_ok=!strcmp("delete_MatrixDynSize",cmd))) _wrap_delete_MatrixDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 14: if ((name_ok=!strcmp("MatrixDynSize_TODOparen",cmd))) _wrap_MatrixDynSize_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 15: if ((name_ok=!strcmp("MatrixDynSize_getVal",cmd))) _wrap_MatrixDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 16: if ((name_ok=!strcmp("MatrixDynSize_setVal",cmd))) _wrap_MatrixDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 17: if ((name_ok=!strcmp("MatrixDynSize_rows",cmd))) _wrap_MatrixDynSize_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 18: if ((name_ok=!strcmp("MatrixDynSize_cols",cmd))) _wrap_MatrixDynSize_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 19: if ((name_ok=!strcmp("MatrixDynSize_data",cmd))) _wrap_MatrixDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 20: if ((name_ok=!strcmp("MatrixDynSize_zero",cmd))) _wrap_MatrixDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 21: if ((name_ok=!strcmp("MatrixDynSize_resize",cmd))) _wrap_MatrixDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 22: if ((name_ok=!strcmp("MatrixDynSize_toString",cmd))) _wrap_MatrixDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 23: if ((name_ok=!strcmp("MatrixDynSize_display",cmd))) _wrap_MatrixDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 24: if ((name_ok=!strcmp("new_VectorDynSize",cmd))) _wrap_new_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 25: if ((name_ok=!strcmp("delete_VectorDynSize",cmd))) _wrap_delete_VectorDynSize(resc,resv,argc,(mxArray**)(argv)); break;
  case 26: if ((name_ok=!strcmp("VectorDynSize_TODOparen",cmd))) _wrap_VectorDynSize_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 27: if ((name_ok=!strcmp("VectorDynSize_getVal",cmd))) _wrap_VectorDynSize_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 28: if ((name_ok=!strcmp("VectorDynSize_setVal",cmd))) _wrap_VectorDynSize_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 29: if ((name_ok=!strcmp("VectorDynSize_size",cmd))) _wrap_VectorDynSize_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 30: if ((name_ok=!strcmp("VectorDynSize_data",cmd))) _wrap_VectorDynSize_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 31: if ((name_ok=!strcmp("VectorDynSize_zero",cmd))) _wrap_VectorDynSize_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 32: if ((name_ok=!strcmp("VectorDynSize_resize",cmd))) _wrap_VectorDynSize_resize(resc,resv,argc,(mxArray**)(argv)); break;
  case 33: if ((name_ok=!strcmp("VectorDynSize_toString",cmd))) _wrap_VectorDynSize_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 34: if ((name_ok=!strcmp("VectorDynSize_display",cmd))) _wrap_VectorDynSize_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 35: if ((name_ok=!strcmp("new_Vector6",cmd))) _wrap_new_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 36: if ((name_ok=!strcmp("delete_Vector6",cmd))) _wrap_delete_Vector6(resc,resv,argc,(mxArray**)(argv)); break;
  case 37: if ((name_ok=!strcmp("Vector6_TODOparen",cmd))) _wrap_Vector6_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 38: if ((name_ok=!strcmp("Vector6_getVal",cmd))) _wrap_Vector6_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 39: if ((name_ok=!strcmp("Vector6_setVal",cmd))) _wrap_Vector6_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 40: if ((name_ok=!strcmp("Vector6_size",cmd))) _wrap_Vector6_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 41: if ((name_ok=!strcmp("Vector6_data",cmd))) _wrap_Vector6_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 42: if ((name_ok=!strcmp("Vector6_zero",cmd))) _wrap_Vector6_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 43: if ((name_ok=!strcmp("Vector6_toString",cmd))) _wrap_Vector6_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 44: if ((name_ok=!strcmp("Vector6_display",cmd))) _wrap_Vector6_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 45: if ((name_ok=!strcmp("new_PositionRaw",cmd))) _wrap_new_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 46: if ((name_ok=!strcmp("delete_PositionRaw",cmd))) _wrap_delete_PositionRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 47: if ((name_ok=!strcmp("PositionRaw_TODOparen",cmd))) _wrap_PositionRaw_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 48: if ((name_ok=!strcmp("PositionRaw_getVal",cmd))) _wrap_PositionRaw_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 49: if ((name_ok=!strcmp("PositionRaw_setVal",cmd))) _wrap_PositionRaw_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 50: if ((name_ok=!strcmp("PositionRaw_size",cmd))) _wrap_PositionRaw_size(resc,resv,argc,(mxArray**)(argv)); break;
  case 51: if ((name_ok=!strcmp("PositionRaw_data",cmd))) _wrap_PositionRaw_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 52: if ((name_ok=!strcmp("PositionRaw_zero",cmd))) _wrap_PositionRaw_zero(resc,resv,argc,(mxArray**)(argv)); break;
  case 53: if ((name_ok=!strcmp("PositionRaw_changePoint",cmd))) _wrap_PositionRaw_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 54: if ((name_ok=!strcmp("PositionRaw_changeRefPoint",cmd))) _wrap_PositionRaw_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 55: if ((name_ok=!strcmp("PositionRaw_changeCoordinateFrame",cmd))) _wrap_PositionRaw_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 56: if ((name_ok=!strcmp("PositionRaw_compose",cmd))) _wrap_PositionRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 57: if ((name_ok=!strcmp("PositionRaw_inverse",cmd))) _wrap_PositionRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 58: if ((name_ok=!strcmp("PositionRaw_toString",cmd))) _wrap_PositionRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 59: if ((name_ok=!strcmp("PositionRaw_display",cmd))) _wrap_PositionRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 60: if ((name_ok=!strcmp("new_PositionSemantics",cmd))) _wrap_new_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 61: if ((name_ok=!strcmp("delete_PositionSemantics",cmd))) _wrap_delete_PositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 62: if ((name_ok=!strcmp("PositionSemantics_getPoint",cmd))) _wrap_PositionSemantics_getPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 63: if ((name_ok=!strcmp("PositionSemantics_getReferencePoint",cmd))) _wrap_PositionSemantics_getReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 64: if ((name_ok=!strcmp("PositionSemantics_getCoordinateFrame",cmd))) _wrap_PositionSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 65: if ((name_ok=!strcmp("PositionSemantics_setPoint",cmd))) _wrap_PositionSemantics_setPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 66: if ((name_ok=!strcmp("PositionSemantics_setReferencePoint",cmd))) _wrap_PositionSemantics_setReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 67: if ((name_ok=!strcmp("PositionSemantics_setCoordinateFrame",cmd))) _wrap_PositionSemantics_setCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 68: if ((name_ok=!strcmp("PositionSemantics_changePoint",cmd))) _wrap_PositionSemantics_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 69: if ((name_ok=!strcmp("PositionSemantics_changeRefPoint",cmd))) _wrap_PositionSemantics_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 70: if ((name_ok=!strcmp("PositionSemantics_changeCoordinateFrame",cmd))) _wrap_PositionSemantics_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 71: if ((name_ok=!strcmp("PositionSemantics_compose",cmd))) _wrap_PositionSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 72: if ((name_ok=!strcmp("PositionSemantics_inverse",cmd))) _wrap_PositionSemantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 73: if ((name_ok=!strcmp("PositionSemantics_toString",cmd))) _wrap_PositionSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 74: if ((name_ok=!strcmp("PositionSemantics_display",cmd))) _wrap_PositionSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 75: if ((name_ok=!strcmp("new_Position",cmd))) _wrap_new_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 76: if ((name_ok=!strcmp("delete_Position",cmd))) _wrap_delete_Position(resc,resv,argc,(mxArray**)(argv)); break;
  case 77: if ((name_ok=!strcmp("Position_getSemantics",cmd))) _wrap_Position_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 78: if ((name_ok=!strcmp("Position_changePoint",cmd))) _wrap_Position_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 79: if ((name_ok=!strcmp("Position_changeRefPoint",cmd))) _wrap_Position_changeRefPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 80: if ((name_ok=!strcmp("Position_changeCoordinateFrame",cmd))) _wrap_Position_changeCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 81: if ((name_ok=!strcmp("Position_compose",cmd))) _wrap_Position_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 82: if ((name_ok=!strcmp("Position_inverse",cmd))) _wrap_Position_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 83: if ((name_ok=!strcmp("Position_plus",cmd))) _wrap_Position_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 84: if ((name_ok=!strcmp("Position_minus",cmd))) _wrap_Position_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 85: if ((name_ok=!strcmp("Position_uminus",cmd))) _wrap_Position_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 86: if ((name_ok=!strcmp("Position_toString",cmd))) _wrap_Position_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 87: if ((name_ok=!strcmp("Position_display",cmd))) _wrap_Position_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 88: if ((name_ok=!strcmp("new_SpatialForceVectorRaw",cmd))) _wrap_new_SpatialForceVectorRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 89: if ((name_ok=!strcmp("delete_SpatialForceVectorRaw",cmd))) _wrap_delete_SpatialForceVectorRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 90: if ((name_ok=!strcmp("SpatialForceVectorRaw_changePoint",cmd))) _wrap_SpatialForceVectorRaw_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 91: if ((name_ok=!strcmp("SpatialForceVectorRaw_changeCoordFrame",cmd))) _wrap_SpatialForceVectorRaw_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 92: if ((name_ok=!strcmp("SpatialForceVectorRaw_compose",cmd))) _wrap_SpatialForceVectorRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 93: if ((name_ok=!strcmp("SpatialForceVectorRaw_inverse",cmd))) _wrap_SpatialForceVectorRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 94: if ((name_ok=!strcmp("SpatialForceVectorRaw_dot",cmd))) _wrap_SpatialForceVectorRaw_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 95: if ((name_ok=!strcmp("SpatialForceVectorRaw_plus",cmd))) _wrap_SpatialForceVectorRaw_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 96: if ((name_ok=!strcmp("SpatialForceVectorRaw_minus",cmd))) _wrap_SpatialForceVectorRaw_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 97: if ((name_ok=!strcmp("SpatialForceVectorRaw_uminus",cmd))) _wrap_SpatialForceVectorRaw_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 98: if ((name_ok=!strcmp("new_SpatialMotionVectorRaw",cmd))) _wrap_new_SpatialMotionVectorRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 99: if ((name_ok=!strcmp("delete_SpatialMotionVectorRaw",cmd))) _wrap_delete_SpatialMotionVectorRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 100: if ((name_ok=!strcmp("SpatialMotionVectorRaw_changePoint",cmd))) _wrap_SpatialMotionVectorRaw_changePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 101: if ((name_ok=!strcmp("SpatialMotionVectorRaw_changeCoordFrame",cmd))) _wrap_SpatialMotionVectorRaw_changeCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 102: if ((name_ok=!strcmp("SpatialMotionVectorRaw_compose",cmd))) _wrap_SpatialMotionVectorRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 103: if ((name_ok=!strcmp("SpatialMotionVectorRaw_inverse",cmd))) _wrap_SpatialMotionVectorRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 104: if ((name_ok=!strcmp("SpatialMotionVectorRaw_dot",cmd))) _wrap_SpatialMotionVectorRaw_dot(resc,resv,argc,(mxArray**)(argv)); break;
  case 105: if ((name_ok=!strcmp("SpatialMotionVectorRaw_plus",cmd))) _wrap_SpatialMotionVectorRaw_plus(resc,resv,argc,(mxArray**)(argv)); break;
  case 106: if ((name_ok=!strcmp("SpatialMotionVectorRaw_minus",cmd))) _wrap_SpatialMotionVectorRaw_minus(resc,resv,argc,(mxArray**)(argv)); break;
  case 107: if ((name_ok=!strcmp("SpatialMotionVectorRaw_uminus",cmd))) _wrap_SpatialMotionVectorRaw_uminus(resc,resv,argc,(mxArray**)(argv)); break;
  case 108: if ((name_ok=!strcmp("new_Twist",cmd))) _wrap_new_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 109: if ((name_ok=!strcmp("delete_Twist",cmd))) _wrap_delete_Twist(resc,resv,argc,(mxArray**)(argv)); break;
  case 110: if ((name_ok=!strcmp("new_Wrench",cmd))) _wrap_new_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 111: if ((name_ok=!strcmp("delete_Wrench",cmd))) _wrap_delete_Wrench(resc,resv,argc,(mxArray**)(argv)); break;
  case 112: if ((name_ok=!strcmp("new_RotationRaw",cmd))) _wrap_new_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 113: if ((name_ok=!strcmp("delete_RotationRaw",cmd))) _wrap_delete_RotationRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 114: if ((name_ok=!strcmp("RotationRaw_TODOparen",cmd))) _wrap_RotationRaw_TODOparen(resc,resv,argc,(mxArray**)(argv)); break;
  case 115: if ((name_ok=!strcmp("RotationRaw_getVal",cmd))) _wrap_RotationRaw_getVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 116: if ((name_ok=!strcmp("RotationRaw_setVal",cmd))) _wrap_RotationRaw_setVal(resc,resv,argc,(mxArray**)(argv)); break;
  case 117: if ((name_ok=!strcmp("RotationRaw_rows",cmd))) _wrap_RotationRaw_rows(resc,resv,argc,(mxArray**)(argv)); break;
  case 118: if ((name_ok=!strcmp("RotationRaw_cols",cmd))) _wrap_RotationRaw_cols(resc,resv,argc,(mxArray**)(argv)); break;
  case 119: if ((name_ok=!strcmp("RotationRaw_data",cmd))) _wrap_RotationRaw_data(resc,resv,argc,(mxArray**)(argv)); break;
  case 120: if ((name_ok=!strcmp("RotationRaw_changeOrientFrame",cmd))) _wrap_RotationRaw_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 121: if ((name_ok=!strcmp("RotationRaw_changeRefOrientFrame",cmd))) _wrap_RotationRaw_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 122: if ((name_ok=!strcmp("RotationRaw_convertToNewCoordFrame",cmd))) _wrap_RotationRaw_convertToNewCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 123: if ((name_ok=!strcmp("RotationRaw_compose",cmd))) _wrap_RotationRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 124: if ((name_ok=!strcmp("RotationRaw_inverse2",cmd))) _wrap_RotationRaw_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 125: if ((name_ok=!strcmp("RotationRaw_inverse",cmd))) _wrap_RotationRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 126: if ((name_ok=!strcmp("RotationRaw_mtimes",cmd))) _wrap_RotationRaw_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 127: if ((name_ok=!strcmp("RotationRaw_toString",cmd))) _wrap_RotationRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 128: if ((name_ok=!strcmp("RotationRaw_display",cmd))) _wrap_RotationRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 129: if ((name_ok=!strcmp("RotationRaw_RotX",cmd))) _wrap_RotationRaw_RotX(resc,resv,argc,(mxArray**)(argv)); break;
  case 130: if ((name_ok=!strcmp("RotationRaw_RotY",cmd))) _wrap_RotationRaw_RotY(resc,resv,argc,(mxArray**)(argv)); break;
  case 131: if ((name_ok=!strcmp("RotationRaw_RotZ",cmd))) _wrap_RotationRaw_RotZ(resc,resv,argc,(mxArray**)(argv)); break;
  case 132: if ((name_ok=!strcmp("RotationRaw_RPY",cmd))) _wrap_RotationRaw_RPY(resc,resv,argc,(mxArray**)(argv)); break;
  case 133: if ((name_ok=!strcmp("new_RotationSemantics",cmd))) _wrap_new_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 134: if ((name_ok=!strcmp("delete_RotationSemantics",cmd))) _wrap_delete_RotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 135: if ((name_ok=!strcmp("RotationSemantics_getOrientationFrame",cmd))) _wrap_RotationSemantics_getOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 136: if ((name_ok=!strcmp("RotationSemantics_getReferenceOrientationFrame",cmd))) _wrap_RotationSemantics_getReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 137: if ((name_ok=!strcmp("RotationSemantics_getCoordinateFrame",cmd))) _wrap_RotationSemantics_getCoordinateFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 138: if ((name_ok=!strcmp("RotationSemantics_setOrientationFrame",cmd))) _wrap_RotationSemantics_setOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 139: if ((name_ok=!strcmp("RotationSemantics_setReferenceOrientationFrame",cmd))) _wrap_RotationSemantics_setReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 140: if ((name_ok=!strcmp("RotationSemantics_changeOrientFrame",cmd))) _wrap_RotationSemantics_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 141: if ((name_ok=!strcmp("RotationSemantics_changeRefOrientFrame",cmd))) _wrap_RotationSemantics_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 142: if ((name_ok=!strcmp("RotationSemantics_convertToNewCoordFrame",cmd))) _wrap_RotationSemantics_convertToNewCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 143: if ((name_ok=!strcmp("RotationSemantics_compose",cmd))) _wrap_RotationSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 144: if ((name_ok=!strcmp("RotationSemantics_inverse2",cmd))) _wrap_RotationSemantics_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 145: if ((name_ok=!strcmp("RotationSemantics_toString",cmd))) _wrap_RotationSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 146: if ((name_ok=!strcmp("RotationSemantics_display",cmd))) _wrap_RotationSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 147: if ((name_ok=!strcmp("new_Rotation",cmd))) _wrap_new_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 148: if ((name_ok=!strcmp("delete_Rotation",cmd))) _wrap_delete_Rotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 149: if ((name_ok=!strcmp("Rotation_getSemantics",cmd))) _wrap_Rotation_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 150: if ((name_ok=!strcmp("Rotation_changeOrientFrame",cmd))) _wrap_Rotation_changeOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 151: if ((name_ok=!strcmp("Rotation_changeRefOrientFrame",cmd))) _wrap_Rotation_changeRefOrientFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 152: if ((name_ok=!strcmp("Rotation_convertToNewCoordFrame",cmd))) _wrap_Rotation_convertToNewCoordFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 153: if ((name_ok=!strcmp("Rotation_compose",cmd))) _wrap_Rotation_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 154: if ((name_ok=!strcmp("Rotation_inverse2",cmd))) _wrap_Rotation_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 155: if ((name_ok=!strcmp("Rotation_inverse",cmd))) _wrap_Rotation_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 156: if ((name_ok=!strcmp("Rotation_mtimes",cmd))) _wrap_Rotation_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 157: if ((name_ok=!strcmp("Rotation_toString",cmd))) _wrap_Rotation_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 158: if ((name_ok=!strcmp("Rotation_display",cmd))) _wrap_Rotation_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 159: if ((name_ok=!strcmp("new_TransformRaw",cmd))) _wrap_new_TransformRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 160: if ((name_ok=!strcmp("delete_TransformRaw",cmd))) _wrap_delete_TransformRaw(resc,resv,argc,(mxArray**)(argv)); break;
  case 161: if ((name_ok=!strcmp("TransformRaw_compose",cmd))) _wrap_TransformRaw_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 162: if ((name_ok=!strcmp("TransformRaw_inverse2",cmd))) _wrap_TransformRaw_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 163: if ((name_ok=!strcmp("TransformRaw_transform",cmd))) _wrap_TransformRaw_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 164: if ((name_ok=!strcmp("TransformRaw_inverse",cmd))) _wrap_TransformRaw_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 165: if ((name_ok=!strcmp("TransformRaw_mtimes",cmd))) _wrap_TransformRaw_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 166: if ((name_ok=!strcmp("TransformRaw_toString",cmd))) _wrap_TransformRaw_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 167: if ((name_ok=!strcmp("TransformRaw_display",cmd))) _wrap_TransformRaw_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 168: if ((name_ok=!strcmp("new_TransformSemantics",cmd))) _wrap_new_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 169: if ((name_ok=!strcmp("delete_TransformSemantics",cmd))) _wrap_delete_TransformSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 170: if ((name_ok=!strcmp("TransformSemantics_getRotationSemantics",cmd))) _wrap_TransformSemantics_getRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 171: if ((name_ok=!strcmp("TransformSemantics_getPositionSemantics",cmd))) _wrap_TransformSemantics_getPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 172: if ((name_ok=!strcmp("TransformSemantics_setRotationSemantics",cmd))) _wrap_TransformSemantics_setRotationSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 173: if ((name_ok=!strcmp("TransformSemantics_setPositionSemantics",cmd))) _wrap_TransformSemantics_setPositionSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 174: if ((name_ok=!strcmp("TransformSemantics_getPoint",cmd))) _wrap_TransformSemantics_getPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 175: if ((name_ok=!strcmp("TransformSemantics_getOrientationFrame",cmd))) _wrap_TransformSemantics_getOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 176: if ((name_ok=!strcmp("TransformSemantics_getReferencePoint",cmd))) _wrap_TransformSemantics_getReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 177: if ((name_ok=!strcmp("TransformSemantics_getReferenceOrientationFrame",cmd))) _wrap_TransformSemantics_getReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 178: if ((name_ok=!strcmp("TransformSemantics_setPoint",cmd))) _wrap_TransformSemantics_setPoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 179: if ((name_ok=!strcmp("TransformSemantics_setOrientationFrame",cmd))) _wrap_TransformSemantics_setOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 180: if ((name_ok=!strcmp("TransformSemantics_setReferencePoint",cmd))) _wrap_TransformSemantics_setReferencePoint(resc,resv,argc,(mxArray**)(argv)); break;
  case 181: if ((name_ok=!strcmp("TransformSemantics_setReferenceOrientationFrame",cmd))) _wrap_TransformSemantics_setReferenceOrientationFrame(resc,resv,argc,(mxArray**)(argv)); break;
  case 182: if ((name_ok=!strcmp("TransformSemantics_check_compose",cmd))) _wrap_TransformSemantics_check_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 183: if ((name_ok=!strcmp("TransformSemantics_check_inverse2",cmd))) _wrap_TransformSemantics_check_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 184: if ((name_ok=!strcmp("TransformSemantics_check_transform",cmd))) _wrap_TransformSemantics_check_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 185: if ((name_ok=!strcmp("TransformSemantics_compose",cmd))) _wrap_TransformSemantics_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 186: if ((name_ok=!strcmp("TransformSemantics_inverse2",cmd))) _wrap_TransformSemantics_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 187: if ((name_ok=!strcmp("TransformSemantics_transform",cmd))) _wrap_TransformSemantics_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 188: if ((name_ok=!strcmp("TransformSemantics_inverse",cmd))) _wrap_TransformSemantics_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 189: if ((name_ok=!strcmp("TransformSemantics_mtimes",cmd))) _wrap_TransformSemantics_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 190: if ((name_ok=!strcmp("TransformSemantics_toString",cmd))) _wrap_TransformSemantics_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 191: if ((name_ok=!strcmp("TransformSemantics_display",cmd))) _wrap_TransformSemantics_display(resc,resv,argc,(mxArray**)(argv)); break;
  case 192: if ((name_ok=!strcmp("new_Transform",cmd))) _wrap_new_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 193: if ((name_ok=!strcmp("delete_Transform",cmd))) _wrap_delete_Transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 194: if ((name_ok=!strcmp("Transform_getSemantics",cmd))) _wrap_Transform_getSemantics(resc,resv,argc,(mxArray**)(argv)); break;
  case 195: if ((name_ok=!strcmp("Transform_getRotation",cmd))) _wrap_Transform_getRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 196: if ((name_ok=!strcmp("Transform_getPosition",cmd))) _wrap_Transform_getPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 197: if ((name_ok=!strcmp("Transform_setRotation",cmd))) _wrap_Transform_setRotation(resc,resv,argc,(mxArray**)(argv)); break;
  case 198: if ((name_ok=!strcmp("Transform_setPosition",cmd))) _wrap_Transform_setPosition(resc,resv,argc,(mxArray**)(argv)); break;
  case 199: if ((name_ok=!strcmp("Transform_compose",cmd))) _wrap_Transform_compose(resc,resv,argc,(mxArray**)(argv)); break;
  case 200: if ((name_ok=!strcmp("Transform_inverse2",cmd))) _wrap_Transform_inverse2(resc,resv,argc,(mxArray**)(argv)); break;
  case 201: if ((name_ok=!strcmp("Transform_transform",cmd))) _wrap_Transform_transform(resc,resv,argc,(mxArray**)(argv)); break;
  case 202: if ((name_ok=!strcmp("Transform_inverse",cmd))) _wrap_Transform_inverse(resc,resv,argc,(mxArray**)(argv)); break;
  case 203: if ((name_ok=!strcmp("Transform_mtimes",cmd))) _wrap_Transform_mtimes(resc,resv,argc,(mxArray**)(argv)); break;
  case 204: if ((name_ok=!strcmp("Transform_toString",cmd))) _wrap_Transform_toString(resc,resv,argc,(mxArray**)(argv)); break;
  case 205: if ((name_ok=!strcmp("Transform_display",cmd))) _wrap_Transform_display(resc,resv,argc,(mxArray**)(argv)); break;
  default: mexErrMsgIdAndTxt("SWIG:RuntimeError","No function id %d.",fcn_id);
  }
  if (!name_ok) {
    mexErrMsgIdAndTxt("SWIG:RuntimeError","Mismatching name (%s) for function ID %d.",cmd,fcn_id);
  }
}
